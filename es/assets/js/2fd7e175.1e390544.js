"use strict";(self.webpackChunkink_docs=self.webpackChunkink_docs||[]).push([[1504],{75368:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>c,contentTitle:()=>i,default:()=>u,frontMatter:()=>r,metadata:()=>t,toc:()=>l});var o=a(17624),s=a(4552);const r={title:"Preguntas Frequentes",slug:"/faq",hide_table_of_contents:!0},i=void 0,t={id:"faq/faq",title:"Preguntas Frequentes",description:'\xbfQui\xe9n es "Squink"?',source:"@site/i18n/es/docusaurus-plugin-content-docs/current/faq/faq.md",sourceDirName:"faq",slug:"/faq",permalink:"/es/faq",draft:!1,unlisted:!1,editUrl:"https://github.com/paritytech/ink-docs/edit/master/docs/faq/faq.md",tags:[],version:"current",frontMatter:{title:"Preguntas Frequentes",slug:"/faq",hide_table_of_contents:!0},sidebar:"reference",previous:{title:"Polkadot Contract Wizard",permalink:"/es/getting-started/contract-wizard"},next:{title:"Migrating from ink! 3.x to 4.0",permalink:"/es/faq/migrating-from-ink-3-to-4"}},c={},l=[{value:"\xbfQui\xe9n es &quot;Squink&quot;?",id:"qui\xe9n-es-squink",level:3},{value:"\xbfEs &quot;ink&quot; o &quot;ink!&quot;? \xbfQu\xe9 representa el &quot;!&quot;?",id:"es-ink-o-ink-qu\xe9-representa-el-",level:3},{value:"\xbfCual es la relaci\xf3n de ink! con Substrate/Polkadot?",id:"cual-es-la-relaci\xf3n-de-ink-con-substratepolkadot",level:3},{value:"\xbfComo llamar a otros smart contracts en la misma blockchain?",id:"como-llamar-a-otros-smart-contracts-en-la-misma-blockchain",level:3},{value:"\xbfComo llamar a otros smart contracts de otro parachain?",id:"como-llamar-a-otros-smart-contracts-de-otro-parachain",level:3},{value:"\xbfQu\xe9 es el ABI del contrato o los Metadatos?",id:"qu\xe9-es-el-abi-del-contrato-o-los-metadatos",level:3},{value:"\xbfPuede el bug re-entrancy ocurrir en los contratos ink!?",id:"puede-el-bug-re-entrancy-ocurrir-en-los-contratos-ink",level:3},{value:"\xbfComo puede mi smart contract interacturar con el runtime?",id:"como-puede-mi-smart-contract-interacturar-con-el-runtime",level:3},{value:"\xbfComo puedo utilizar ink! en una cadena de Substrate con una configuraci\xf3n de cadena presonalizada?",id:"como-puedo-utilizar-ink-en-una-cadena-de-substrate-con-una-configuraci\xf3n-de-cadena-presonalizada",level:3},{value:"\xbfQu\xe9 significa el <code>#![cfg_attr(not(feature = &quot;std&quot;), no_std)]</code> al principio de cada contrato?",id:"qu\xe9-significa-el-cfg_attrnotfeature--std-no_std-al-principio-de-cada-contrato",level:3},{value:"\xbfSeguridad Overflow?",id:"seguridad-overflow",level:3},{value:"\xbfCu\xe1l es la diferencia entre memoria y storage?",id:"cu\xe1l-es-la-diferencia-entre-memoria-y-storage",level:3},{value:"\xbfC\xf3mo imprimo algo en la consola desde el runtime?",id:"c\xf3mo-imprimo-algo-en-la-consola-desde-el-runtime",level:3},{value:"\xbfPor qu\xe9 la libreria est\xe1ndar de Rust (stdlib) no est\xe1 disponible en ink!?",id:"por-qu\xe9-la-libreria-est\xe1ndar-de-rust-stdlib-no-est\xe1-disponible-en-ink",level:3},{value:"\xbfC\xf3mo creo un hash de un valor?",id:"c\xf3mo-creo-un-hash-de-un-valor",level:3},{value:"\xbfPor qu\xe9 no es posible utilizar tipos de datos de coma flotante en ink!? \xbfC\xf3mo implemenar el retorno de un n\xfamero decimal?",id:"por-qu\xe9-no-es-posible-utilizar-tipos-de-datos-de-coma-flotante-en-ink-c\xf3mo-implemenar-el-retorno-de-un-n\xfamero-decimal",level:3},{value:"\xbfPor qu\xe9 no puedo simplemente utilizar las colecciones de datos est\xe1ndars de Rust en ink!?",id:"por-qu\xe9-no-puedo-simplemente-utilizar-las-colecciones-de-datos-est\xe1ndars-de-rust-en-ink",level:3},{value:"\xbfPor qu\xe9 recibo un error <code>ContractTrapped</code> cuando interactuo con el contrato?",id:"por-qu\xe9-recibo-un-error-contracttrapped-cuando-interactuo-con-el-contrato",level:3},{value:"\xbfQu\xe9 son los trait <code>scale::Encode</code> y <code>scale::Decode</code>?",id:"qu\xe9-son-los-trait-scaleencode-y-scaledecode",level:3},{value:"\xbfComo utilizo <code>String</code> en mi contrato?",id:"como-utilizo-string-en-mi-contrato",level:3}];function d(e){const n={a:"a",admonition:"admonition",blockquote:"blockquote",code:"code",em:"em",h3:"h3",li:"li",ol:"ol",p:"p",pre:"pre",ul:"ul",...(0,s.M)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.h3,{id:"qui\xe9n-es-squink",children:'\xbfQui\xe9n es "Squink"?'}),"\n",(0,o.jsxs)("div",{class:"squid-container",children:[(0,o.jsx)("img",{src:"/img/ink-squink.svg",alt:"Squink \u2012 the ink! mascot",height:"90",className:"squid"}),(0,o.jsx)(n.p,{children:"Este peque\xf1o y lindo calamar morado es Squink."}),(0,o.jsx)(n.p,{children:"Squink es la mascota de ink! y guia a los nuevos usuarios y aventureros a trav\xe9s de nuestras presentaciones,\nworkshops y tutoriales. Tambi\xe9n tiene un romance con la mascota de Rust, Ferris."}),(0,o.jsx)(n.p,{children:"Generalmente es muy amigable y abierto a aprender nuevos Rustaceans pero ten cuidado de\nnunca molestarlo quitando puntos de la palabra ink! deletre\xe1ndolo incorrectamente!\nRealmente es en los puntos. Las historias cuentan que exig\xeda la ortograf\xeda de ink! con tantos puntos como sea posible."})]}),"\n",(0,o.jsx)(n.h3,{id:"es-ink-o-ink-qu\xe9-representa-el-",children:'\xbfEs "ink" o "ink!"? \xbfQu\xe9 representa el "!"?'}),"\n",(0,o.jsxs)(n.p,{children:["La ortograf\xeda correcta es ",(0,o.jsx)(n.em,{children:"ink!"}),' \u2012con "i" en miniscula y un simbolo de exclamaci\xf3n al final.\nLa historia es que:']}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:["\u2026en la primera iteraci\xf3n ink! era originalmente un ",(0,o.jsx)(n.a,{href:"https://doc.rust-lang.org/book/ch19-06-macros.html#declarative-macros-with-macro_rules-for-general-metaprogramming",children:"declarative Rust macro"}),". Un contrato se invocaba escribiendo ",(0,o.jsx)(n.code,{children:"ink!{ \u2026 }"}),"."]}),"\n",(0,o.jsx)(n.li,{children:"\u2026hay una analog\xeda del mundo real de escribir un contrato en papel usando tinta."}),"\n",(0,o.jsx)(n.li,{children:"\u2026queriamos tener todos los puntos (DOTs) posibles en el nombre \ud83d\ude09."}),"\n"]}),"\n",(0,o.jsx)(n.p,{children:"As\xed que por favor no hagan llorar al pobre Squink teniendo que leer !ink, ink, Ink!, or Ink."}),"\n",(0,o.jsx)("center",{children:(0,o.jsx)("img",{src:"/img/sad-squid.svg",alt:"Squink \u2012 the ink! mascot",width:"300"})}),"\n",(0,o.jsx)(n.h3,{id:"cual-es-la-relaci\xf3n-de-ink-con-substratepolkadot",children:"\xbfCual es la relaci\xf3n de ink! con Substrate/Polkadot?"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:"Substrate es un framework modular para construir aplicaciones descentralizadas sobre la tecnolog\xeda Blockchain."}),"\n",(0,o.jsx)(n.li,{children:"Polkadot es una blockchain de capa-0 construida utilizando Substrate que permite orquestar toda una flota de otras blockchains para unir fuerzas y comunicarse entre s\xed."}),"\n",(0,o.jsxs)(n.li,{children:["Blockchains construidas con Substrate pueden incluir el m\xf3dulo ya visto ",(0,o.jsx)(n.code,{children:"contracts-pallet"})," para permitir\ninstanciar y ejecutar smart contracts."]}),"\n"]}),"\n",(0,o.jsxs)(n.p,{children:["ink! fue construido para permitir usuarios escribir smart contracts en Rust apuntando a blockchains construidas con\nSubstrate que tengan el ya mencionado ",(0,o.jsx)(n.code,{children:"contracts-pallet"})," incluido."]}),"\n",(0,o.jsx)(n.p,{children:"Mientras que ink! es actualmente el lenguaje de smart contract m\xe1s avanzado para Substrate blockchains no es\nla \xfanica opci\xf3n posible de los usuarios. Existe tambi\xe9n un compilador de Solidity a Wasm llamado Solang\nque tambi\xe9n permite ser utilizado en cadenas Substrate y existen otros lenguaje\nallows to target Substrate chains y existen otros lenguajes en fase de proyecto y descubrimiento con el mismo proposito."}),"\n",(0,o.jsxs)(n.p,{children:["En el lado de Substrate es igualmente cierto para el ",(0,o.jsx)(n.code,{children:"contracts-pallet"}),".  Es solo un m\xf3dulo que define\nel conjunto b\xe1sico de caracter\xedsticas requeridas para ejecutar smart contracts que lo incluyan en la blockchain.\nSin embargo, no es necesariamente la \xfanica soluci\xf3n para hacer exactamente esto. Tambi\xe9n esta el ",(0,o.jsx)(n.code,{children:"evm-pallet"}),"\npara ejecutar smart contracts sobre la EVM as\xed como el experimental ",(0,o.jsx)(n.code,{children:"actors-pallet"})," que permite ejecutar\nsmart contracts escritor en el modelo de programaci\xf3n de estilo actor.\nCon el tiempo la comunidad de Substrate hacer surgir otros pallets para la ejecuci\xf3n de smart contracts."]}),"\n",(0,o.jsxs)(n.p,{children:["Por favor vea nuestra p\xe1gina ",(0,o.jsx)(n.a,{href:"/como-funciona",children:"C\xf3mo funciona \u2012 Substrate"})," para m\xe1s informaci\xf3n."]}),"\n",(0,o.jsx)(n.h3,{id:"como-llamar-a-otros-smart-contracts-en-la-misma-blockchain",children:"\xbfComo llamar a otros smart contracts en la misma blockchain?"}),"\n",(0,o.jsxs)(n.p,{children:["Mira la secci\xf3n ",(0,o.jsx)(n.a,{href:"/basics/cross-contract-calling",children:"Cross-contract calling"}),"."]}),"\n",(0,o.jsx)(n.h3,{id:"como-llamar-a-otros-smart-contracts-de-otro-parachain",children:"\xbfComo llamar a otros smart contracts de otro parachain?"}),"\n",(0,o.jsx)(n.p,{children:"Esta caracter\xedstica a\xfan no ha sido implementada en el lado de Substrate."}),"\n",(0,o.jsx)(n.h3,{id:"qu\xe9-es-el-abi-del-contrato-o-los-metadatos",children:"\xbfQu\xe9 es el ABI del contrato o los Metadatos?"}),"\n",(0,o.jsxs)(n.p,{children:["En ink! los metadatos de un smart contract son recuperados utilizando la herramienta CLI ",(0,o.jsx)(n.code,{children:"cargo-contract"})," e\ninvocando ",(0,o.jsx)(n.code,{children:"cargo contract build"})," que devuelve un fichero ",(0,o.jsx)(n.code,{children:".contract"})," que incluye ambos el\n",(0,o.jsx)(n.code,{children:".wasm"})," compilado del smart contract de ink! as\xed como la denominada informaci\xf3n de metadatos del mismo\nsmart contract.\nLos metadatos son especialmente importantes para herramientas de terceros como Polkadot JS Apps o el Contracts UI\ny proporciona informaci\xf3n \xfatil sobre los constructores, mensajes, eventos, funciones selectoras, documentaci\xf3n del contrato y\ncomentarios de las estructuras antes mencionadas, as\xed como tambi\xe9n c\xf3mo se codificar\xe1n y decodificar\xe1n las entradas y salidas, respectivamente, etc."]}),"\n",(0,o.jsx)(n.h3,{id:"puede-el-bug-re-entrancy-ocurrir-en-los-contratos-ink",children:"\xbfPuede el bug re-entrancy ocurrir en los contratos ink!?"}),"\n",(0,o.jsx)(n.p,{children:"Si. Sin embargo, el equipo de Substrate es muy consciente de los problemas asociados y ya ha pensado en\nposibles adiciones futuras para eliminar los ataques de re-entrancy."}),"\n",(0,o.jsx)(n.h3,{id:"como-puede-mi-smart-contract-interacturar-con-el-runtime",children:"\xbfComo puede mi smart contract interacturar con el runtime?"}),"\n",(0,o.jsxs)(n.p,{children:["Mira la secci\xf3n de las ",(0,o.jsx)(n.a,{href:"/macros-attributes/chain-extension",children:"Chain Extensions"})," para m\xe1s informaci\xf3n."]}),"\n",(0,o.jsx)(n.h3,{id:"como-puedo-utilizar-ink-en-una-cadena-de-substrate-con-una-configuraci\xf3n-de-cadena-presonalizada",children:"\xbfComo puedo utilizar ink! en una cadena de Substrate con una configuraci\xf3n de cadena presonalizada?"}),"\n",(0,o.jsxs)(n.p,{children:["Pr favor mira ",(0,o.jsxs)(n.a,{href:"https://docs.rs/ink_macro/4.0.0/ink_macro/attr.contract.html#header-arguments",children:["el argumento ",(0,o.jsx)(n.code,{children:"env_types"})]}),"\npara el macro del contrato. Te permite especificar el entorno en la\n",(0,o.jsx)(n.code,{children:"#[ink::contract(env = MyEnvironment)]"}),"."]}),"\n",(0,o.jsxs)(n.h3,{id:"qu\xe9-significa-el-cfg_attrnotfeature--std-no_std-al-principio-de-cada-contrato",children:["\xbfQu\xe9 significa el ",(0,o.jsx)(n.code,{children:'#![cfg_attr(not(feature = "std"), no_std)]'})," al principio de cada contrato?"]}),"\n",(0,o.jsxs)(n.p,{children:["Las anotaciones ",(0,o.jsx)(n.code,{children:"#[cfg(..)]"})," o ",(0,o.jsx)(n.code,{children:"#[cfg_attr(..)]"})," son la manera que Rust tiene para hacer compilaci\xf3n condicional."]}),"\n",(0,o.jsx)(n.p,{children:"Los smart contracts ink! pueden ser compilados de dos modos diferentes."}),"\n",(0,o.jsxs)(n.p,{children:["Mediante ",(0,o.jsx)(n.code,{children:'#![cfg_attr(not(feature = "std"), no_std)]'})," un ink! smart contract le dice al compilador de Rust\nen que modo sera compilado. Esto juega tambi\xe9n un rol significativo en como ink! genera el c\xf3digo del\nin which mode they are being compiled. This also plays a significant role in how ink! generates smart contract."]}),"\n",(0,o.jsx)(n.p,{children:"Los dos modos son:"}),"\n",(0,o.jsxs)(n.ol,{children:["\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsxs)(n.p,{children:["Modo Wasm: Este es el modo escogido cuando compilamos un ink! smart contract para desplegarlo en una blockchain.\nEl resultado binario es un fichero ",(0,o.jsx)(n.code,{children:".wasm"})," y como tal, no es posible usar ciertas partes de la libreria est\xe1ndar de Rust."]}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsx)(n.p,{children:"Modo Off-chain: Este es el modo escogido cuando intentamos testear un ink! smart contract utilizando un entorno off-chain.\nTesting en un entorno es muy \xfatil para comprobar si ciertos constructores de ink! o mensajes se comportan bien y permiten una mejor depuraci\xf3n que cuando intentan depurar el mismo smart contract desplegado en una cadena."}),"\n"]}),"\n"]}),"\n",(0,o.jsx)(n.h3,{id:"seguridad-overflow",children:"\xbfSeguridad Overflow?"}),"\n",(0,o.jsxs)(n.p,{children:['Al ser escrito en Rust, ink! proporciona seguridad en tiempo de compilaci\xf3n para overflow/underflow. Utilizando la\nconfiguraci\xf3n del compilador de Rust, puedes espec\xedficar si quieres soporte matem\xe1tico para overflowing, o si quieres\nque entre en p\xe1nico durante la ejecuci\xf3n del contrato cuando ocurra un overflows. No es necesario importar continuamente\nlas lbrerias "Safe Math", aunque Rust tambi\xe9n proporciona ',(0,o.jsx)(n.a,{href:"https://doc.rust-lang.org/std/primitive.u32.html",children:"checked integrado, wrapped, y funciones matematicas saturadas"}),"."]}),"\n",(0,o.jsx)(n.admonition,{type:"note",children:(0,o.jsx)(n.p,{children:"Hay algunos problemas conocidos con respecto a la funcionalidad a nivel de los overflows checks en el compilador y el tama\xf1o resultante del Wasm blob. TEsta funci\xf3n podr\xeda cambiar o ser iterada en el futuro."})}),"\n",(0,o.jsx)(n.h3,{id:"cu\xe1l-es-la-diferencia-entre-memoria-y-storage",children:"\xbfCu\xe1l es la diferencia entre memoria y storage?"}),"\n",(0,o.jsx)(n.p,{children:"En ink!, la memoria se refiere a la memoria del computador, mientras que el storage se refiere al almacenamiento on-chain\nutilizado por una instancia del contrato. La memoria es temporal y solo dura hasta que la ejecuci\xf3n del contrato termine,\nmientras que el storage es persistente y dura durante m\xe1 de una ejecuciones del contrato.\nEl storage del contrato est\xe1 construido sobre el storage del runtime, y su acceso se considera lento."}),"\n",(0,o.jsx)(n.h3,{id:"c\xf3mo-imprimo-algo-en-la-consola-desde-el-runtime",children:"\xbfC\xf3mo imprimo algo en la consola desde el runtime?"}),"\n",(0,o.jsx)("div",{class:"translateTodo",children:(0,o.jsxs)(n.p,{children:["Please see our page on ",(0,o.jsx)(n.a,{href:"/es/basics/contract-debugging",children:"Contract Debugging"}),"."]})}),"\n",(0,o.jsx)(n.h3,{id:"por-qu\xe9-la-libreria-est\xe1ndar-de-rust-stdlib-no-est\xe1-disponible-en-ink",children:"\xbfPor qu\xe9 la libreria est\xe1ndar de Rust (stdlib) no est\xe1 disponible en ink!?"}),"\n",(0,o.jsx)(n.p,{children:"La libreria est\xe1ndar de Rust consiste en tres diferentes capas:"}),"\n",(0,o.jsxs)(n.ol,{children:["\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsxs)(n.p,{children:["La libreria ",(0,o.jsx)(n.code,{children:"core"})," que define todo lo que no tiene dependencias fuera de Rust. Incluye tipos como  ",(0,o.jsx)(n.code,{children:"Option"}),", ",(0,o.jsx)(n.code,{children:"Result"}),"\nasi como toda una variedad de m\xf3dulos, funciones y macros.\nLos smart contracts de ink! permite a los autores utilizar el crate de Rust ",(0,o.jsx)(n.code,{children:"core"}),"."]}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsxs)(n.p,{children:["La libreria ",(0,o.jsx)(n.code,{children:"alloc"})," que depende de un asignador global y principalmente define las colecciones que vierten sus elementos\nen la memoria heap de la ejecuci\xf3n.\nEjemplos de colecciones son ",(0,o.jsx)(n.code,{children:"Box"}),", ",(0,o.jsx)(n.code,{children:"String"}),", ",(0,o.jsx)(n.code,{children:"Vec"}),", ",(0,o.jsx)(n.code,{children:"HashMap"}),", ",(0,o.jsx)(n.code,{children:"LinkedList"})," y m\xf3dulos\ncomo ",(0,o.jsx)(n.code,{children:"fmt"}),", ",(0,o.jsx)(n.code,{children:"rc"})," (punteros ref-counted) o borrows."]}),"\n",(0,o.jsxs)(n.p,{children:["Los smart contracts de ink! permite a los autores utilizar el crate de Rust ",(0,o.jsx)(n.code,{children:"alloc"}),".\nPor defecto los autores ink! utilizan definiciones del crate ",(0,o.jsx)(n.code,{children:"alloc"})," a trav\xe9s del crate ",(0,o.jsx)(n.code,{children:"ink_prelude"}),"."]}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsxs)(n.p,{children:["La libreria ",(0,o.jsx)(n.code,{children:"std"})," es lo que generalmente la gente llama libreria est\xe1ndar de Rust."]}),"\n",(0,o.jsxs)(n.blockquote,{children:["\n",(0,o.jsx)(n.p,{children:"La Libreria Est\xe1ndar de Rust es la base de port\xe1til del software Rust, un conjunto minimo y bien testeado de abstracciones compartidas por el amplio ecosistema de Rust."}),"\n"]}),"\n",(0,o.jsx)(n.p,{children:"Requiere varias capacidades del sistema operativo para funcionar correctamente, como sistemas de entrada y salida para archivos, redes, etc."}),"\n",(0,o.jsxs)(n.p,{children:["Desde que el objectivo de compilaci\xf3n Wasm (a.k.a. ",(0,o.jsx)(n.code,{children:"wasm32-unknown-unknown"}),") no soporta libreria est\xe1ndar de Rust los autores ink! tampoco pueden utilizarlo para sus propios fines. En su lugar el ",(0,o.jsx)(n.code,{children:"contracts-pallet"}),"\nintenta proporcionar algunas funcionalidades comunes que de otra manera no estar\xedan disponibles para operaciones comunes de smart contracts."]}),"\n"]}),"\n"]}),"\n",(0,o.jsx)(n.h3,{id:"c\xf3mo-creo-un-hash-de-un-valor",children:"\xbfC\xf3mo creo un hash de un valor?"}),"\n",(0,o.jsxs)(n.p,{children:["Una serie de hashes criptogr\xe1ficos est\xe1n integrados en el ",(0,o.jsx)(n.a,{href:"/how-it-works",children:"contracts-pallet"})," y\npor lo tanto son muy eficientes de utilizar. Actualmente soportamos un pu\xf1ado de esos, puedes\nver la lista completa ",(0,o.jsx)(n.a,{href:"https://docs.rs/ink_env/4.0.0/ink_env/hash/trait.CryptoHash.html",children:"aqu\xed"}),"."]}),"\n",(0,o.jsxs)(n.p,{children:["Si necesitas utilizar urgentemente otro hash criptogr\xe1fico puedes introducirlo a trav\xe9s de\n",(0,o.jsx)(n.a,{href:"/macros-attributes/chain-extension",children:"Chain Extensions"}),"\no crear una propuesta para incluirlo en el conjunto por defecto de ",(0,o.jsx)(n.code,{children:"contracts-pallet"}),"."]}),"\n",(0,o.jsx)(n.p,{children:"Se puede utilizar uno de los hashes criptogr\xe1ficos que ya est\xe1n integrados como se explica aqui:"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:(0,o.jsx)(n.a,{href:"https://docs.rs/ink_env/4.0.0/ink_env/fn.hash_bytes.html",children:(0,o.jsx)(n.code,{children:"self.env().hash_bytes()"})})}),"\n",(0,o.jsx)(n.li,{children:(0,o.jsx)(n.a,{href:"https://docs.rs/ink_env/4.0.0/ink_env/fn.hash_encoded.html",children:(0,o.jsx)(n.code,{children:"self.env().hash_encoded()"})})}),"\n"]}),"\n",(0,o.jsx)(n.h3,{id:"por-qu\xe9-no-es-posible-utilizar-tipos-de-datos-de-coma-flotante-en-ink-c\xf3mo-implemenar-el-retorno-de-un-n\xfamero-decimal",children:"\xbfPor qu\xe9 no es posible utilizar tipos de datos de coma flotante en ink!? \xbfC\xf3mo implemenar el retorno de un n\xfamero decimal?"}),"\n",(0,o.jsx)(n.p,{children:"Los tipos floats son geniales por todo tipo de razones, pero tambi\xe9n tienen un inconveniente importante.\nLa aritmetica de los tipos de datos de coma flotante es no determinista, lo que significa\nque diferentes procesadores pueden computar diferentes resultados (ligeramente) para la misma operaci\xf3n.\nA pesar de que hay una especificaci\xf3n IEEE, resultados no deterministas pueden venir de\nlibrer\xedas utilizadas especificas, o incluso de hardware. Para que los nodos de una red blockchain lleguen\na un acuerdo con el estado de la cadena, todas las operaciones deben ser completamente deterministas.\nPor lo tanto, no permitimos tipos de datos de punto flotante en ink!."}),"\n",(0,o.jsx)(n.p,{children:'En consecuencia, no es posible devolver un n\xfamero decimal desde un mensaje ink".\nLo que debe hacer en su lugar es hacer que su interfaz de usuario denomine el n\xfamero devuelto a decimales.'}),"\n",(0,o.jsx)(n.p,{children:"Nota que es t\xedpico en blockchains tener el n\xfamero de tokens disponibles como n\xfameros no flotantes\ny determina la denominaci\xf3n en la interfaz de usuario. Por ejemplo, 1 Bitcoin es equivalente a la\n100,000,000 de la unidad m\xe1s peque\xf1a: Satoshi. Y todas las implementaciones de Bitcoin persisten\ninternalmente balances de cuentas en Satoshi, y no como un n\xfamero decimal de Bitcoins."}),"\n",(0,o.jsx)(n.h3,{id:"por-qu\xe9-no-puedo-simplemente-utilizar-las-colecciones-de-datos-est\xe1ndars-de-rust-en-ink",children:"\xbfPor qu\xe9 no puedo simplemente utilizar las colecciones de datos est\xe1ndars de Rust en ink!?"}),"\n",(0,o.jsxs)(n.p,{children:["\xa1Puedes utilizarlos! Estan expuestos en el crate ",(0,o.jsx)(n.code,{children:"ink_prelude"})," (p.ej. ",(0,o.jsx)(n.code,{children:"ink::prelude::vec::Vec"}),")\ny puedes devolverlos desde mensajes ink! y hacer que persistan en el storage."]}),"\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.em,{children:"Sin embargo, las colleciones stdlib de Rust no est\xe1n optimizadas para el uso de smart contract!"}),"\nAsi que por ejemplo, si quieres utilizarlas para persistir los datos en la cadena, siempre tendran que\nocupar una \xfanica celda del storage y as\xed que se carguen siempre con avidez, en su totalidad.\n\xa1Esto puede ser muy costoso! Simplemente piensa en un ",(0,o.jsx)(n.code,{children:"Vec"})," o un ",(0,o.jsx)(n.code,{children:"HashMap"})," donde el smart contract\nposiblemente solo necesite acceder a algunos elementos, en lugar de a toda la recopilaci\xf3n de datos."]}),"\n",(0,o.jsxs)(n.h3,{id:"por-qu\xe9-recibo-un-error-contracttrapped-cuando-interactuo-con-el-contrato",children:["\xbfPor qu\xe9 recibo un error ",(0,o.jsx)(n.code,{children:"ContractTrapped"})," cuando interactuo con el contrato?"]}),"\n",(0,o.jsx)(n.p,{children:"Cuando no constituye una afirmaci\xf3n deliberada, como por ejemplo una verificaci\xf3n de permisos,\nlo m\xe1s probable es que se trate de un error en su contrato o en ink!."}),"\n",(0,o.jsxs)(n.p,{children:["Una fuente com\xfan de ",(0,o.jsx)(n.code,{children:"ContractTrapped"})," son los Integer overflows, que puede hacer que su contrato se atrape.\nExiste un ",(0,o.jsx)(n.a,{href:"https://github.com/rust-lang/rust/issues/78744",children:"conocido bug en el compilador de Rust"}),"\ncon respecto a las operaciones matem\xe1ticas seguras. Como soluci\xf3n para este particular bug\nintenta a\xf1adir ",(0,o.jsx)(n.code,{children:"overflow-checks = false"})," en tu ",(0,o.jsx)(n.code,{children:"Cargo.toml"}),".\nEsto deshabilitar\xe1 por completo las operaciones matem\xe1ticas seguras, pero desafortunadamente no conocemos actualmente una mejor soluci\xf3n hasta que se solucione el error en el compilador."]}),"\n",(0,o.jsxs)(n.p,{children:["Si no encuentras el problema tambi\xe9n puedes pedir ayuda en nuestro\n",(0,o.jsx)(n.a,{href:"https://riot.im/app/#/room/#ink:matrix.parity.io",children:"Element"})," p\xfablico\no nuestro canal de ",(0,o.jsx)(n.a,{href:"https://discord.gg/j2DKRRbSJr",children:"Discord"}),"."]}),"\n",(0,o.jsxs)(n.h3,{id:"qu\xe9-son-los-trait-scaleencode-y-scaledecode",children:["\xbfQu\xe9 son los trait ",(0,o.jsx)(n.code,{children:"scale::Encode"})," y ",(0,o.jsx)(n.code,{children:"scale::Decode"}),"?"]}),"\n",(0,o.jsxs)(n.p,{children:["Los blockchains basados en Substrate utilizan el ",(0,o.jsx)(n.a,{href:"https://github.com/paritytech/parity-scale-codec",children:"SCALE codec"}),"\npara codificar los datos.\nComo consequencia los datos de cada interacci\xf3n con Substrate necesita se codificada con\nSCALE - esto significa que necesita implementar ",(0,o.jsx)(n.code,{children:"scale::Encode"}),",\n",(0,o.jsx)(n.code,{children:"scale::Decode"}),", o ambos. Esto afecta por ejemplo a los datos que quieres devolver al llamante de la funci\xf3n,\na los datos que quieres tomar como entrada, o a los datos que quieras almacenar on-chain."]}),"\n",(0,o.jsxs)(n.p,{children:["Un error com\xfan que puedes encontrarte cuando un trait SCALE necesario no este implementado para\nuna estructura de datos podr\xeda estar en la l\xednea de ",(0,o.jsx)(n.code,{children:'the trait "WrapperTypeEncode" is not implemented for "Foo"'}),".\nPor ejemplo, puedes encontrarte este error si intentantas almacenar una estructura de\ndatos personalizada en el storage del contrato. O por ejemplo cuando intentes devolver un\nerror personalizado desde un mensaje ink!."]}),"\n",(0,o.jsx)(n.admonition,{type:"note",children:(0,o.jsxs)(n.p,{children:["El error ",(0,o.jsx)(n.code,{children:'the trait "WrapperTypeEncode" is not implemented for \u2026'})," es tambi\xe9n\nun error com\xfan cuando una versi\xf3n del ",(0,o.jsx)(n.code,{children:"parity-scale-codec"})," es utilizada\nen el contrato y no coincide con la versi\xf3n utilizada por ink!."]})}),"\n",(0,o.jsx)(n.p,{children:"La soluci\xf3n generalmente es agregar una implementaci\xf3n adecuada del trait para tu estructura de datos:"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.code,{children:"Encode"})," es utilizado para condificar una estructura de datos cuando por ejemplo es devuelta a un llamante de la funci\xf3n o cuando persiste en el storage de los contratos."]}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.code,{children:"Decode"})," es utilizado para lo inverso, por ejemplo cuando lees del storage o tomas una entrada de un usuario (o de otro contrato)."]}),"\n"]}),"\n"]}),"\n",(0,o.jsx)(n.p,{children:"Es posible derivar estos traits y, a menudo, la forma m\xe1s sencilla es simplemente derivar el trait que falta del objeto para el que esta faltando la implementaci\xf3n:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-rust",children:"#[derive(scale::Encode, scale::Decode)]\nstruct MyCustomDataStructure { \u2026 }\n"})}),"\n",(0,o.jsxs)(n.h3,{id:"como-utilizo-string-en-mi-contrato",children:["\xbfComo utilizo ",(0,o.jsx)(n.code,{children:"String"})," en mi contrato?"]}),"\n",(0,o.jsxs)(n.p,{children:["En general, debes pensar dos veces si de verdad necesitas ",(0,o.jsx)(n.code,{children:"String"}),".\nLos smart contracts normalmente no utilizan strings; estos se utilizan\nnormalmente para las interacciones del usuario y deben vivir en la UI y no en la cadena."]}),"\n",(0,o.jsx)(n.p,{children:"Una buena practica es minimizar el uso del storage de tu contrato y tu solo debes persis\nand solo deber\xedas persistir los elementos necesarios para derivar transiciones de estado en el contrato."}),"\n",(0,o.jsxs)(n.p,{children:["Si a\xfan asi, por alguna raz\xf3n, necesitas utilizar ",(0,o.jsx)(n.code,{children:"String"}),", entonces debes utilizar\nel ",(0,o.jsx)(n.code,{children:"String"})," ",(0,o.jsx)(n.a,{href:"https://docs.rs/ink_prelude/latest/ink_prelude/string/struct.String.html",children:"del preludio ink!"}),"."]})]})}function u(e={}){const{wrapper:n}={...(0,s.M)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(d,{...e})}):d(e)}},4552:(e,n,a)=>{a.d(n,{I:()=>t,M:()=>i});var o=a(11504);const s={},r=o.createContext(s);function i(e){const n=o.useContext(r);return o.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function t(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:i(e.components),o.createElement(r.Provider,{value:n},e.children)}}}]);