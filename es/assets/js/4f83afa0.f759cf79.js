"use strict";(self.webpackChunkink_docs=self.webpackChunkink_docs||[]).push([[8348],{41120:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>c,contentTitle:()=>l,default:()=>u,frontMatter:()=>i,metadata:()=>t,toc:()=>o});var s=r(17624),a=r(4552);const i={title:"ink! vs. Solidity",hide_title:!0,slug:"/ink-vs-solidity"},l="ink! vs. Solidity",t={id:"intro/ink-vs-solidity",title:"ink! vs. Solidity",description:"La siguiente tabla muestra una breve comparaci\xf3n de caracter\xedsticas entre ink! y Solidity:",source:"@site/i18n/es/docusaurus-plugin-content-docs/version-5.x/intro/ink-vs-solidity.md",sourceDirName:"intro",slug:"/ink-vs-solidity",permalink:"/es/5.x/ink-vs-solidity",draft:!1,unlisted:!1,editUrl:"https://github.com/paritytech/ink-docs/edit/master/versioned_docs/version-5.x/intro/ink-vs-solidity.md",tags:[],version:"5.x",frontMatter:{title:"ink! vs. Solidity",hide_title:!0,slug:"/ink-vs-solidity"},sidebar:"reference",previous:{title:"C\xf3mo funciona \u2012 Substrate",permalink:"/es/5.x/como-funciona"},next:{title:"ink! vs. CosmWasm",permalink:"/es/5.x/ink-vs-cosmwasm"}},c={},o=[{value:"Gu\xeda Solidity a ink!",id:"gu\xeda-solidity-a-ink",level:2},{value:"Tabla de Contenidos",id:"tabla-de-contenidos",level:3},{value:"Convertir un contrato de Solidity a ink!",id:"convertir-un-contrato-de-solidity-a-ink",level:2},{value:"1. Generar un nuevo contrato de ink!",id:"1-generar-un-nuevo-contrato-de-ink",level:3},{value:"2. Compilar el contrato",id:"2-compilar-el-contrato",level:3},{value:"3. Convertir campos de clase de Solidity a Struct de Rust",id:"3-convertir-campos-de-clase-de-solidity-a-struct-de-rust",level:3},{value:"4. Convertir cada funci\xf3n",id:"4-convertir-cada-funci\xf3n",level:3},{value:"Mejores pr\xe1cticas + Tips",id:"mejores-pr\xe1cticas--tips",level:2},{value:"Equivalencias de sintaxis",id:"equivalencias-de-sintaxis",level:2},{value:"<code>funci\xf3n p\xfablica</code>",id:"funci\xf3n-p\xfablica",level:3},{value:"<code>declaraci\xf3n de mapping </code>",id:"declaraci\xf3n-de-mapping-",level:3},{value:"<code>uso de mapping</code>",id:"uso-de-mapping",level:3},{value:"<code>struct</code>",id:"struct",level:3},{value:"<code>assertions / requires</code>",id:"assertions--requires",level:3},{value:"<code>timestamp</code>",id:"timestamp",level:3},{value:"<code>caller del contrato</code>",id:"caller-del-contrato",level:3},{value:"<code>direcci\xf3n de contrato</code>",id:"direcci\xf3n-de-contrato",level:3},{value:"<code>bytes</code>",id:"bytes",level:3},{value:"<code>uint256</code>",id:"uint256",level:3},{value:"<code>payable</code>",id:"payable",level:3},{value:"<code>dep\xf3sito recibido / pago</code>",id:"dep\xf3sito-recibido--pago",level:3},{value:"<code>balance del contrato</code>",id:"balance-del-contrato",level:3},{value:"<code>transferir tokens desde el contrato</code>",id:"transferir-tokens-desde-el-contrato",level:3},{value:"<code>eventos e indexado</code>",id:"eventos-e-indexado",level:3},{value:"<code>errores y returns</code>",id:"errores-y-returns",level:3},{value:"<code>throw</code>",id:"throw",level:4},{value:"<code>assert</code>",id:"assert",level:4},{value:"<code>require y revert</code>",id:"require-y-revert",level:4},{value:"<code>mappings anidados + estructuras custom / avanzadas</code>",id:"mappings-anidados--estructuras-custom--avanzadas",level:3},{value:"<code>llamadas entre contratos</code>",id:"llamadas-entre-contratos",level:3},{value:"<code>enviar transacci\xf3n gen\xe9rica / llamadas din\xe1micas entre contratos</code>",id:"enviar-transacci\xf3n-gen\xe9rica--llamadas-din\xe1micas-entre-contratos",level:3},{value:"Limitaciones de ink! v3",id:"limitaciones-de-ink-v3",level:2},{value:"Soluci\xf3n de problemas y errores",id:"soluci\xf3n-de-problemas-y-errores",level:2},{value:"unit testing (off-chain)",id:"unit-testing-off-chain",level:2}];function d(e){const n={a:"a",br:"br",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",h4:"h4",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,a.M)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)("img",{src:"/img/title/solidity.svg",className:"titlePic"}),"\n",(0,s.jsx)(n.h1,{id:"ink-vs-solidity",children:"ink! vs. Solidity"}),"\n",(0,s.jsx)(n.p,{children:"La siguiente tabla muestra una breve comparaci\xf3n de caracter\xedsticas entre ink! y Solidity:"}),"\n",(0,s.jsx)("div",{class:"comparison",children:(0,s.jsxs)(n.table,{children:[(0,s.jsx)(n.thead,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.th,{style:{textAlign:"left"}}),(0,s.jsx)(n.th,{style:{textAlign:"left"},children:"ink!"}),(0,s.jsx)(n.th,{style:{textAlign:"left"},children:"Solidity"})]})}),(0,s.jsxs)(n.tbody,{children:[(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{style:{textAlign:"left"},children:"M\xe1quina virtual"}),(0,s.jsx)(n.td,{style:{textAlign:"left"},children:"Cualquier VM Wasm"}),(0,s.jsx)(n.td,{style:{textAlign:"left"},children:"EVM"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{style:{textAlign:"left"},children:"Codificaci\xf3n"}),(0,s.jsx)(n.td,{style:{textAlign:"left"},children:"Wasm"}),(0,s.jsx)(n.td,{style:{textAlign:"left"},children:"EVM Byte Code"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{style:{textAlign:"left"},children:"Lenguaje"}),(0,s.jsx)(n.td,{style:{textAlign:"left"},children:"Rust"}),(0,s.jsx)(n.td,{style:{textAlign:"left"},children:"Standalone"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{style:{textAlign:"left"},children:"Protecci\xf3n contra desbordamiento"}),(0,s.jsx)(n.td,{style:{textAlign:"left"},children:"Habilitado por default"}),(0,s.jsx)(n.td,{style:{textAlign:"left"},children:"S\xed"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{style:{textAlign:"left"},children:"Funciones de constructor"}),(0,s.jsx)(n.td,{style:{textAlign:"left"},children:"Multiple"}),(0,s.jsx)(n.td,{style:{textAlign:"left"},children:"Single"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{style:{textAlign:"left"},children:"Herramientas"}),(0,s.jsx)(n.td,{style:{textAlign:"left"},children:"Cualquiera que soporte Rust"}),(0,s.jsx)(n.td,{style:{textAlign:"left"},children:"Custom"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{style:{textAlign:"left"},children:"Versionado"}),(0,s.jsx)(n.td,{style:{textAlign:"left"},children:"Sem\xe1ntico"}),(0,s.jsx)(n.td,{style:{textAlign:"left"},children:"Sem\xe1ntico"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{style:{textAlign:"left"},children:"Contiene Metadata?"}),(0,s.jsx)(n.td,{style:{textAlign:"left"},children:"S\xed"}),(0,s.jsx)(n.td,{style:{textAlign:"left"},children:"S\xed"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{style:{textAlign:"left"},children:"Proyecto de archivos m\xfaltiples"}),(0,s.jsx)(n.td,{style:{textAlign:"left"},children:"Planeado"}),(0,s.jsx)(n.td,{style:{textAlign:"left"},children:"S\xed"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{style:{textAlign:"left"},children:"Entradas de  Storage"}),(0,s.jsx)(n.td,{style:{textAlign:"left"},children:"Variable"}),(0,s.jsx)(n.td,{style:{textAlign:"left"},children:"256 bits"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{style:{textAlign:"left"},children:"Tipos soportados"}),(0,s.jsx)(n.td,{style:{textAlign:"left"},children:"Docs"}),(0,s.jsx)(n.td,{style:{textAlign:"left"},children:"Docs"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{style:{textAlign:"left"},children:"Contiene Interfaces?"}),(0,s.jsx)(n.td,{style:{textAlign:"left"},children:"S\xed (Traits de Rust)"}),(0,s.jsx)(n.td,{style:{textAlign:"left"},children:"S\xed"})]})]})]})}),"\n",(0,s.jsx)(n.h2,{id:"gu\xeda-solidity-a-ink",children:"Gu\xeda Solidity a ink!"}),"\n",(0,s.jsx)(n.h3,{id:"tabla-de-contenidos",children:"Tabla de Contenidos"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.a,{href:"#ink-vs-solidity",children:"ink! vs. Solidity"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.a,{href:"#gu%C3%ADa-solidity-a-ink",children:"Gu\xeda Solidity a ink!"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"#tabla-de-contenidos",children:"Tabla de Contenidos"})}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.a,{href:"#convertir-un-contrato-de-solidity-a-ink",children:"Convertir un contrato de Solidity a ink!"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"#1-generar-un-nuevo-contrato-de-ink",children:"1. Generar un nuevo contrato de ink!"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"#2-compilar-el-contrato",children:"2. Compilar el contrato"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"#3-convertir-campos-de-clase-de-solidity-a-struct-de-rust",children:"3. Convertir campos de clase de Solidity a Struct de Rust"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"#4-convertir-cada-funci%C3%B3n",children:"4. Convertir cada funci\xf3n"})}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"#mejores-pr%C3%A1cticas--tips",children:"Mejores pr\xe1cticas + Tips"})}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.a,{href:"#equivalencias-de-sintaxis",children:"Equivalencias de sintaxis"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"#funci%C3%B3n-p%C3%BAblica",children:(0,s.jsx)(n.code,{children:"funci\xf3n p\xfablica"})})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"#declaraci%C3%B3n-de-mapping-",children:(0,s.jsx)(n.code,{children:"declaraci\xf3n de mapping "})})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"#uso-de-mapping",children:(0,s.jsx)(n.code,{children:"uso de mapping"})})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"#struct",children:(0,s.jsx)(n.code,{children:"struct"})})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"#assertions--requires",children:(0,s.jsx)(n.code,{children:"assertions / requires"})})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"#timestamp",children:(0,s.jsx)(n.code,{children:"timestamp"})})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"#caller-del-contrato",children:(0,s.jsx)(n.code,{children:"caller del contrato"})})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"#direcci%C3%B3n-de-contrato",children:(0,s.jsx)(n.code,{children:"direcci\xf3n de contrato"})})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"#bytes",children:(0,s.jsx)(n.code,{children:"bytes"})})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"#uint256",children:(0,s.jsx)(n.code,{children:"uint256"})})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"#payable",children:(0,s.jsx)(n.code,{children:"payable"})})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"#dep%C3%B3sito-recibido--pago",children:(0,s.jsx)(n.code,{children:"dep\xf3sito recibido / pago"})})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"#balance-del-contrato",children:(0,s.jsx)(n.code,{children:"balance del contrato"})})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"#transferir-tokens-desde-el-contrato",children:(0,s.jsx)(n.code,{children:"transferir tokens desde el contrato"})})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"#eventos-e-indexado",children:(0,s.jsx)(n.code,{children:"eventos e indexado"})})}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.a,{href:"#errores-y-returns",children:(0,s.jsx)(n.code,{children:"errores y returns"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"#throw",children:(0,s.jsx)(n.code,{children:"throw"})})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"#assert",children:(0,s.jsx)(n.code,{children:"assert"})})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"#require-y-revert",children:(0,s.jsx)(n.code,{children:"require y revert"})})}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"#mappings-anidados--estructuras-custom--avanzadas",children:(0,s.jsx)(n.code,{children:"mappings anidados + estructuras custom / avanzadas"})})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"#llamadas-entre-contratos",children:(0,s.jsx)(n.code,{children:"llamadas entre contratos"})})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"#enviar-transacci%C3%B3n-gen%C3%A9rica--llamadas-din%C3%A1micas-entre-contratos",children:(0,s.jsx)(n.code,{children:"enviar transacci\xf3n gen\xe9rica / llamadas din\xe1micas entre contratos"})})}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"#limitaciones-de-ink-v3",children:"Limitaciones de ink! v3"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"#soluci%C3%B3n-de-problemas-y-errores",children:"Soluci\xf3n de problemas y errores"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"#unit-testing-off-chain",children:"unit testing (off-chain)"})}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"convertir-un-contrato-de-solidity-a-ink",children:"Convertir un contrato de Solidity a ink!"}),"\n",(0,s.jsx)(n.h3,{id:"1-generar-un-nuevo-contrato-de-ink",children:"1. Generar un nuevo contrato de ink!"}),"\n",(0,s.jsxs)(n.p,{children:['Ejecutar el siguiente comando para crear la estructura de un contrato de ink! El comando instalar\xe1 el c\xf3digo repetitivo para ink! "Hola, Mundo!" (el contrato ',(0,s.jsx)(n.a,{href:"https://github.com/paritytech/ink-examples/tree/main/flipper",children:(0,s.jsx)(n.code,{children:"flipper"})}),")"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"cargo contract new <contract-name>\n"})}),"\n",(0,s.jsx)(n.h3,{id:"2-compilar-el-contrato",children:"2. Compilar el contrato"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"cargo contract build\n"})}),"\n",(0,s.jsx)(n.h3,{id:"3-convertir-campos-de-clase-de-solidity-a-struct-de-rust",children:"3. Convertir campos de clase de Solidity a Struct de Rust"}),"\n",(0,s.jsx)(n.p,{children:"Solidity es un lenguaje orientado a objetos y utiliza clases. ink! (Rust) no utiliza clases."}),"\n",(0,s.jsx)(n.p,{children:"Un ejemplo de clase de Solidity se ve as\xed:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-c++",children:'contract MyContract {\r\n    bool private _theBool;\r\n    event UpdatedBool(bool indexed _theBool);\r\n\r\n    constructor(bool theBool_) {\r\n        require(theBool_ == true, "theBool_ must start as true");\r\n\r\n        _theBool = theBool_;\r\n    }\r\n\r\n    function setBool(bool newBool) public returns (bool boolChanged) {\r\n        if _theBool == newBool {\r\n               boolChanged = false;\r\n        } else {\r\n            boolChanged = true;\r\n        }\r\n\r\n        _theBool = newBool;\r\n        // emit event\r\n        UpdatedBool(newBool);\r\n    }\r\n}\n'})}),"\n",(0,s.jsx)(n.p,{children:"Y el equivalente en un contrato de ink! se ve as\xed:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-rust",children:'#![cfg_attr(not(feature = "std"), no_std)]\r\n\r\nuse ink_lang as ink;\r\n\r\n#[ink::contract]\r\nmod mycontract {\r\n    #[ink(storage)]\r\n    pub struct MyContract {\r\n        the_bool: bool, // las properties de clase se convierten en campos del struct\r\n    }\r\n\r\n    #[ink(event)]\r\n    pub struct UpdatedBool {\r\n        #[ink(topic)] // -> indexed\r\n        the_bool: bool,\r\n    }\r\n\r\n    impl MyContract {\r\n        #[ink(constructor)]\r\n        pub fn new(the_bool: bool) -> Self {\r\n            assert!(the_bool == true, "the_bool must start as true");\r\n            Self { the_bool }\r\n        }\r\n\r\n        #[ink(message)] // las funciones se vuelven implementaciones del struct\r\n        pub fn set_bool(&mut self, new_bool: bool) -> bool {\r\n            let bool_changed = true;\r\n\r\n            if self.the_bool == new_bool{\r\n                bool_changed = false;\r\n            }else{\r\n                bool_changed = true;\r\n            }\r\n\r\n            self.the_bool = new_bool;\r\n\r\n            self.env().emit_event(UpdatedBool {\r\n                the_bool: new_bool\r\n            });\r\n\r\n            // return\r\n            bool_changed\r\n        }\r\n    }\r\n}\n'})}),"\n",(0,s.jsx)(n.p,{children:"Algunas diferencias clave son:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Las variables de clase / miembros de Solidity se colocar\xe1n en el struct del contrato de ink!"}),"\n",(0,s.jsxs)(n.li,{children:["Todos lo m\xe9todos de clase en Solidity son ",(0,s.jsx)(n.code,{children:"impl"}),"ementados para el struct del contrato en ink!"]}),"\n",(0,s.jsxs)(n.li,{children:["Solidity frecuentemente prefija variables con un gui\xf3n bajo (",(0,s.jsx)(n.code,{children:"_name"}),"). ink! / Rust solamente prefija con un gui\xf3n bajo a las variables ",(0,s.jsx)(n.em,{children:"no usadas"}),"."]}),"\n",(0,s.jsx)(n.li,{children:"Solidity usa camelCase. ink! usa snake_case."}),"\n",(0,s.jsx)(n.li,{children:"En Solidity, el tipo de variable aparece antes del nombre de la variable (Por ejemplo: bool myVar). Mientras que ink! especifica el tipo de var despu\xe9s del nombre de var (Por ejemplo: my_var: bool)"}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"4-convertir-cada-funci\xf3n",children:"4. Convertir cada funci\xf3n"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"Comenzar a convertir cada funci\xf3n una por una."}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Un enfoque recomendado es, de ser posible, evitar las llamadas cross-contract al principio y en su lugar utilizar datos simulados."}),"\n",(0,s.jsxs)(n.li,{children:["Este modo de prueba de unidad off-chain puede ser escrito para probar la funcionalidad b\xe1sica.","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"las unidades de prueba son off-chain y no funcionan con llamadas cross-contract."}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.li,{children:"Una vez que se haya probado por completo, se comienza a agregar las llamadas cross-contract y se llevan a cabo pruebas on-chain manuales y de integraci\xf3n."}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"Asegurarse que la funci\xf3n de visibilidad (p\xfablica y privada) se corresponda en ink!"}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:["Si en Solidity una funci\xf3n devuelve ",(0,s.jsx)(n.code,{children:"bool success"}),", ink! utilizar\xe1 un ",(0,s.jsx)(n.code,{children:"Result<()>"})," (",(0,s.jsx)(n.code,{children:"Result::Ok"})," o ",(0,s.jsx)(n.code,{children:"Result::Err"}),")."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-rust",children:"// ink!\r\n\r\n// result type\r\npub type Result<T> = core::result::Result<T, Error>;\r\n\r\n// ...\r\n\r\n// funci\xf3n p\xfablica que devuelve un Result \r\n#[ink(message)]\r\npub fn my_function(&self) -> Result<()> {\r\n    Ok(())\r\n}\n"})}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"mejores-pr\xe1cticas--tips",children:"Mejores pr\xe1cticas + Tips"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["Si el contrato de Solidity utiliza un ",(0,s.jsx)(n.code,{children:"string"}),", se recomienda utilizar un ",(0,s.jsx)(n.code,{children:"Vec<u8>"})," para evitar la sobrecarga de un ",(0,s.jsx)(n.code,{children:"String"}),". Ver ",(0,s.jsx)(n.a,{href:"https://substrate.stackexchange.com/questions/1174/why-is-it-a-bad-idea-to-use-string-in-an-ink-smart-contract",children:"aqu\xed"})," para m\xe1s detalles del porqu\xe9. El smart contract deber\xeda contener solamente la informaci\xf3n que estrictamente necesita ubicarse en la blockchain y alcanzar un consenso. La UI (interfaz de usuario) deber\xeda usarse para visualizar strings."]}),"\n",(0,s.jsxs)(n.li,{children:["Comprobar todos los ",(0,s.jsx)(n.code,{children:".unwrap()"}),"s ejecutados. Solidity no tiene un control tan estricto como ink! Por ejemplo, se puede acceder a un campo de mapping  tan simple como ",(0,s.jsx)(n.code,{children:"myMapping[someKey]"}),". ink!, sin embargo, requiere de ",(0,s.jsx)(n.code,{children:"self.my_mapping.get(some_key).unwrap()"}),". Un modo \xfatil para manipular casos ",(0,s.jsx)(n.code,{children:"None"})," es utilizar  ",(0,s.jsx)(n.code,{children:".unwrap_or(some_val)"}),"."]}),"\n",(0,s.jsxs)(n.li,{children:["Ejecutar el nodo de los contratos con ",(0,s.jsx)(n.code,{children:"substrate-contracts-node -lerror,runtime::contracts=debug"})," para que las impresiones depuradas y los errores se vizualicen en la consola de nodos."]}),"\n",(0,s.jsxs)(n.li,{children:["Al pasar par\xe1metros a un helper, se recomienda pasar referencias (incluso para las primitivas) ya que Wasm es m\xe1s eficiente con referencias.\r\nPor ejemplo (ver ",(0,s.jsx)(n.a,{href:"https://github.com/paritytech/ink-examples/blob/main/erc20/lib.rs",children:"erc20"})," ejemplo):"]}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-rust",children:"/// Devuelve el balance de la cuenta para el `owner` especificado.\r\n///\r\n/// Devuelve `0` si es una cuenta inexistente.\r\n#[ink(message)]\r\npub fn balance_of(&self, owner: AccountId) -> Balance {\r\n    self.balance_of_impl(&owner)\r\n}\r\n\r\n/// Devuelve el balance de la cuenta para el `owner` especificado. \r\n///\r\n/// Regresa a `0` si es una cuenta inexistente.\r\n///\r\n/// # Nota\r\n///\r\n/// Es preferible llamar a este m\xe9todo antes que `balance_of` ya que este \r\n/// funciona usando referencias que son m\xe1s eficientes en Wasm.\r\n#[inline]\r\nfn balance_of_impl(&self, owner: &AccountId) -> Balance {\r\n    self.balances.get(owner).unwrap_or_default()\r\n}\n"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Al igual que en Solidity, ink! no tiene n\xfameros de punto flotante debido al car\xe1cter no determinista. En cambio el frontend deber\xeda agregar decimales de ser necesario."}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"equivalencias-de-sintaxis",children:"Equivalencias de sintaxis"}),"\n",(0,s.jsx)(n.h3,{id:"funci\xf3n-p\xfablica",children:(0,s.jsx)(n.code,{children:"funci\xf3n p\xfablica"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-c++",children:"// solidity\r\nfunction fnName() public {}\r\n// o\r\n// por default, las funciones son p\xfablicas\r\nfunction fnName() {}\n"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-rust",children:"// ink!\r\n#[ink(message)]\r\npub fn fn_name(&self) {}\n"})}),"\n",(0,s.jsx)(n.h3,{id:"declaraci\xf3n-de-mapping-",children:(0,s.jsx)(n.code,{children:"declaraci\xf3n de mapping "})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-c++",children:"// solidity\r\nmapping(address => uint128) private mapName;\n"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-rust",children:"//ink!\r\nuse ink_storage::{\r\n    traits::SpreadAllocate,\r\n    Mapping,\r\n};\r\n\r\n#[ink(storage)]\r\n#[derive(SpreadAllocate)]\r\npub struct ContractName {\r\n    map_name: Mapping<AccountId, u128>,\r\n}\n"})}),"\n",(0,s.jsxs)(n.p,{children:["Cuando se usa un map en ink!, ",(0,s.jsx)(n.code,{children:"ink_lang::utils::initialize_contract"})," se debe usar en el constructor. Ver ",(0,s.jsx)(n.a,{href:"https://use.ink/datastructures/mapping",children:"aqu\xed"})," para m\xe1s detalles."]}),"\n",(0,s.jsx)(n.h3,{id:"uso-de-mapping",children:(0,s.jsx)(n.code,{children:"uso de mapping"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-c++",children:"// solidity\r\n\r\n// insertar / actualizar\r\naMap[aKey] = aValue;\r\n\r\n// obtener\r\naMap[aKey]\n"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-rust",children:"// ink!\r\n\r\n// insertar / actualizar\r\nself.a_map.insert(&a_key, &a_value);\r\n\r\n// obtener\r\nself.a_map.get(a_key).unwrap()\n"})}),"\n",(0,s.jsx)(n.h3,{id:"struct",children:(0,s.jsx)(n.code,{children:"struct"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-c++",children:"// solidity\r\nstruct MyPerson{\r\n    address person;\r\n    u64 favNum;\r\n}\n"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-rust",children:"// ink!\r\nstruct MyPerson {\r\n    person: AccountId,\r\n    fav_num: u64,\r\n}\n"})}),"\n",(0,s.jsx)(n.h3,{id:"assertions--requires",children:(0,s.jsx)(n.code,{children:"assertions / requires"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-c++",children:'// solidity\r\nrequire(someValue < 10, "someValue is not less than 10");\n'})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-rust",children:'// ink!\r\nassert!(some_value < 10, "some_value is not less than 10");\n'})}),"\n",(0,s.jsx)(n.h3,{id:"timestamp",children:(0,s.jsx)(n.code,{children:"timestamp"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-c++",children:"// solidity\r\nblock.timestamp\r\n// or\r\nnow\n"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-rust",children:"// ink!\r\nself.env().block_timestamp()\n"})}),"\n",(0,s.jsx)(n.h3,{id:"caller-del-contrato",children:(0,s.jsx)(n.code,{children:"caller del contrato"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-c++",children:"// solidity\r\naddress caller = msg.sender;\n"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-rust",children:"// ink!\r\nlet caller: AccountId = self.env().caller();\n"})}),"\n",(0,s.jsx)(n.h3,{id:"direcci\xf3n-de-contrato",children:(0,s.jsx)(n.code,{children:"direcci\xf3n de contrato"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-c++",children:"// solidity\r\naddress(this)\n"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-rust",children:"// ink!\r\nself.env().account_id()\n"})}),"\n",(0,s.jsx)(n.h3,{id:"bytes",children:(0,s.jsx)(n.code,{children:"bytes"})}),"\n",(0,s.jsxs)(n.p,{children:["Solidity tiene un tipo ",(0,s.jsx)(n.code,{children:"bytes"}),". ",(0,s.jsx)(n.code,{children:"bytes"})," es (esencialmente) equivalente a un array de uint8. Por lo tanto ",(0,s.jsx)(n.code,{children:"bytes"})," en Solidity => ",(0,s.jsx)(n.code,{children:"Vec<u8>"})," o ",(0,s.jsx)(n.code,{children:"[u8; ...]"})," en ink!. Ver ",(0,s.jsx)(n.a,{href:"https://ethereum.stackexchange.com/questions/91119/difference-between-byte-and-uint8-datatypes-in-solidity",children:"aqu\xed"})," para m\xe1s detalles. Si se desea, un struct de ",(0,s.jsx)(n.code,{children:"bytes"})," puede ser creado en ink! para replicar el tipo ",(0,s.jsx)(n.code,{children:"bytes"})," en Solidity."]}),"\n",(0,s.jsx)(n.h3,{id:"uint256",children:(0,s.jsx)(n.code,{children:"uint256"})}),"\n",(0,s.jsxs)(n.p,{children:["Solidity utiliza ",(0,s.jsx)(n.code,{children:"uint256"})," y ",(0,s.jsx)(n.code,{children:"uint"})," para representar un tipo de 256 bits."]}),"\n",(0,s.jsxs)(n.p,{children:["Solidity est\xe1 optimizado para words de 256 bits / 32 bytes. Esto significa que si usamos ",(0,s.jsx)(n.code,{children:"uint256"})," en los contratos Solidity se reducir\xe1 el uso de gas -- pero aumentar\xe1 el uso del storage. El mayor tama\xf1o que tiene ink! es un ",(0,s.jsx)(n.code,{children:"u128"}),". ink! compila a Wasm. El mayor tama\xf1o de primitiva de Wasm es 64bit(debido a que la mayor\xeda de las computadoras usan 64bit). Por lo tanto no hay ning\xfan beneficio en usar una primitiva m\xe1s grande sobre una colecci\xf3n."]}),"\n",(0,s.jsxs)(n.p,{children:["Cuando se transfiere un ",(0,s.jsx)(n.code,{children:"uint256"})," de Solidity a ink!, se recomienda  determinar a discreci\xf3n el rango del valor y elegir el tama\xf1o adecuado (u8, u16, u32, u64, u128). Si se requiere un valor de hash de 256 bits, ink! tiene una primitiva de ",(0,s.jsx)(n.code,{children:"Hash"})," disponible. En el caso que un valor necesite ser de 256 bits, se recomienda utilizar un array (ejemplo: ",(0,s.jsx)(n.code,{children:"[u64; 4]"}),")."]}),"\n",(0,s.jsx)(n.h3,{id:"payable",children:(0,s.jsx)(n.code,{children:"payable"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-c++",children:"// solidity\r\nfunction myFunction() payable returns (uint64) {}\n"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-rust",children:"#[ink(message, payable)]\r\npub fn my_function() -> (u64) {}\n"})}),"\n",(0,s.jsx)(n.h3,{id:"dep\xf3sito-recibido--pago",children:(0,s.jsx)(n.code,{children:"dep\xf3sito recibido / pago"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-C++",children:"// solidity\r\nmsg.value\n"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-rust",children:"// ink!\r\nself.env().transferred_value()\n"})}),"\n",(0,s.jsx)(n.h3,{id:"balance-del-contrato",children:(0,s.jsx)(n.code,{children:"balance del contrato"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-c++",children:"// solidity\r\nthis.balance\n"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-rust",children:"// ink!\r\nself.env().balance()\n"})}),"\n",(0,s.jsx)(n.h3,{id:"transferir-tokens-desde-el-contrato",children:(0,s.jsx)(n.code,{children:"transferir tokens desde el contrato"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-c++",children:"// solidity\r\nrecipient.send(amount)\n"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-rust",children:'// ink!\r\nif self.env().transfer(recipient, amount).is_err() {\r\n    panic!("error transferring")\r\n}\n'})}),"\n",(0,s.jsx)(n.h3,{id:"eventos-e-indexado",children:(0,s.jsx)(n.code,{children:"eventos e indexado"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-c++",children:"// solidity\r\n\r\nevent MyCoolEvent(\r\n    u128 indexed indexedValue,\r\n    u128 notIndexedValue,\r\n);\r\n\r\n// emitir evento\r\nMyCoolEvent (someValue, someOtherValue)\n"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-rust",children:"// ink!\r\n\r\n#[ink(event)]\r\npub struct MyCoolEvent {\r\n    #[ink(topic)]\r\n    indexed_value: u128,\r\n\r\n    not_indexed_value: u128,\r\n}\r\n\r\n// emitir evento\r\nself.env().emit_event(MyCoolEvent {\r\n    indexed_value: some_value,\r\n    not_indexed_value: some_other_value\r\n});\n"})}),"\n",(0,s.jsx)(n.h3,{id:"errores-y-returns",children:(0,s.jsx)(n.code,{children:"errores y returns"})}),"\n",(0,s.jsxs)(n.p,{children:["Solidity tiene varios mecanismos de manejo de errores: ",(0,s.jsx)(n.code,{children:"assert"}),", ",(0,s.jsx)(n.code,{children:"require"}),", ",(0,s.jsx)(n.code,{children:"revert"}),", y ",(0,s.jsx)(n.code,{children:"throw"}),". Cada uno de los cuales revertir\xe1 el estado modificado cuando sea solicitado. Ver ",(0,s.jsx)(n.a,{href:"https://medium.com/blockchannel/the-use-of-revert-assert-and-require-in-solidity-and-the-new-revert-opcode-in-the-evm-1a3a7990e06e",children:"este art\xedculo"})," para detalles sobre esto."]}),"\n",(0,s.jsxs)(n.p,{children:["ink! usa un enum ",(0,s.jsx)(n.code,{children:"Result"})," (",(0,s.jsx)(n.code,{children:"Ok(T)"}),", ",(0,s.jsx)(n.code,{children:"Err(E)"}),"), ",(0,s.jsx)(n.code,{children:"assert!"})," y ",(0,s.jsx)(n.code,{children:"panic!"}),". ",(0,s.jsx)(n.a,{href:"https://substrate.stackexchange.com/questions/2391/panic-in-ink-smart-contracts",children:"Esta respuesta de Stack Exchange"})," y ",(0,s.jsx)(n.a,{href:"https://github.com/paritytech/ink/issues/641",children:"discusi\xf3n de GitHub"})," brindan m\xe1s detalles sobre esto."]}),"\n",(0,s.jsx)(n.h4,{id:"throw",children:(0,s.jsx)(n.code,{children:"throw"})}),"\n",(0,s.jsxs)(n.p,{children:["Throw est\xe1 deprecado en Solidity y dar\xeda un error de invalid opcode (sin detalles) y revertir\xeda el estado. Como una alternativa para el patr\xf3n ",(0,s.jsx)(n.code,{children:"if...{throw;}"})," en Solidity, un ",(0,s.jsx)(n.code,{children:"Result::Err"})," deber\xeda ser devuelto para errores esperados, y un ",(0,s.jsx)(n.code,{children:"assert!"})," deber\xeda ser usado para errores que no deber\xedan ocurrir."]}),"\n",(0,s.jsx)(n.h4,{id:"assert",children:(0,s.jsx)(n.code,{children:"assert"})}),"\n",(0,s.jsxs)(n.p,{children:["En Solidity, ",(0,s.jsx)(n.code,{children:"assert"})," se utiliza como un protector interno contra errores en el ",(0,s.jsx)(n.em,{children:"c\xf3digo"}),". En general, un c\xf3digo que est\xe9 funcionando correctamente nunca deber\xeda tener un assert fallido. ",(0,s.jsx)(n.code,{children:"assert"})," en Solidity no tiene strings de error. En ink!, usar ",(0,s.jsx)(n.code,{children:"assert!"}),". ",(0,s.jsx)(n.code,{children:"assert!"})," dar\xe1 como resultado ",(0,s.jsx)(n.code,{children:"panic!"})," si se eval\xfaa como ",(0,s.jsx)(n.em,{children:"falso"}),". El estado se revertir\xe1, y se devolver\xe1 un ",(0,s.jsx)(n.code,{children:"CalleeTrapped"}),". El string de error (opcional) se imprimir\xe1 en el b\xfafer de depuraci\xf3n."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-rust",children:'// ink!\r\nassert!(caller == owner, "caller is not owner")\n'})}),"\n",(0,s.jsx)(n.h4,{id:"require-y-revert",children:(0,s.jsx)(n.code,{children:"require y revert"})}),"\n",(0,s.jsxs)(n.p,{children:["En Solidity, ",(0,s.jsx)(n.code,{children:"require"})," se usa para errores generales (normales) -- por ejemplo errores que ocurren basados en el input del usuario. ",(0,s.jsx)(n.code,{children:"require"})," no tiene la opci\xf3n para un string de error. ",(0,s.jsx)(n.code,{children:"revert"})," es muy similar a ",(0,s.jsx)(n.code,{children:"require"})," excepto que ",(0,s.jsx)(n.code,{children:"revert"})," ser\xe1 llamado en cadenas ",(0,s.jsx)(n.code,{children:"if ... else"}),". Ambos ",(0,s.jsx)(n.code,{children:"require"})," y ",(0,s.jsx)(n.code,{children:"revert"})," revertir\xe1n el estado de la chain. En ink!, ",(0,s.jsx)(n.code,{children:"if ... { return Err(Error::SomeError) }"})," deber\xeda usarse para ",(0,s.jsx)(n.code,{children:"require"})," o ",(0,s.jsx)(n.code,{children:"revert"}),". Cuando un ",(0,s.jsx)(n.code,{children:"Result::Err"})," se devuelve en ink! todo el estado se revierte."]}),"\n",(0,s.jsxs)(n.p,{children:["En general, ",(0,s.jsx)(n.code,{children:"Result::Err"})," deber\xeda usarse cuando un ",(0,s.jsx)(n.em,{children:"calling contract"})," necesita saber ",(0,s.jsx)(n.em,{children:"por qu\xe9"})," una funci\xf3n fall\xf3. De otro modo, ",(0,s.jsx)(n.code,{children:"assert!"})," deber\xeda usarse ya que tiene menos sobrecarga que un ",(0,s.jsx)(n.code,{children:"Result"}),"."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-c++",children:'// Solidity\r\nfunction myFunction(bool returnError) public {\r\n    require(!returnError, "my error here");\r\n\r\n    // o\r\n\r\n    if returnError {\r\n        revert("my error here");\r\n    }\r\n}\n'})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-rust",children:"// ink!\r\n\r\n#[derive(Debug, PartialEq, Eq)]\r\n#[ink::scale_derive(Encode, Decode, TypeInfo)]\r\npub enum Error {\r\n    /// Proveer un comentario detallado sobre el error\r\n    MyError,\r\n}\r\n\r\n// tipo Result\r\npub type Result<T> = core::result::Result<T, Error>;\r\n\r\n// ...\r\n\r\n#[ink(message)]\r\npub fn my_function(&self, return_error: bool) -> Result<()> {\r\n    if return_error{\r\n        return Err(Error::MyError)\r\n    }\r\n    Ok(())\r\n}\n"})}),"\n",(0,s.jsx)(n.h3,{id:"mappings-anidados--estructuras-custom--avanzadas",children:(0,s.jsx)(n.code,{children:"mappings anidados + estructuras custom / avanzadas"})}),"\n",(0,s.jsx)(n.p,{children:"En Solidity, es f\xe1cil crear mappings anidados. En ink! no es tan sencillo."}),"\n",(0,s.jsx)(n.p,{children:"imaginemos el siguiente escenario"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-c++",children:"// solidity\r\ncontract Dao {\r\n    struct Proposal {\r\n        mapping (address => bool) votedYes\r\n    }\r\n\r\n    mapping (address => bool) public isWhitelisted;\r\n    Proposal[] public proposals;\r\n}\n"})}),"\n",(0,s.jsxs)(n.p,{children:["en ink! esto ",(0,s.jsx)(n.em,{children:"parece"})," como si se pudiera representar as\xed:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-rust",children:"#[ink::contract]\r\nmod dao {\r\n\r\n    #[derive(SpreadAllocate)]\r\n    pub struct Proposal {\r\n        voted_yes: Mapping<AccountId, bool>,\r\n    }\r\n\r\n    #[ink(storage)]\r\n    #[derive(SpreadAllocate)]\r\n    pub struct Dao {\r\n        proposals: Vec<Proposal>,\r\n        is_whitelisted: Mapping<AccountId, bool>,\r\n    }\r\n\r\n    impl Dao{\r\n        #[ink(constructor)]\r\n        pub fn new(/*...*/) -> Self {\r\n            //requerido para mappings\r\n            ink_lang::utils::initialize_contract(|contract| {/*...*/})\r\n        }\r\n    }\r\n}\n"})}),"\n",(0,s.jsxs)(n.p,{children:["Sin embargo, esto originar\xe1 un error debido al mapping anidado.",(0,s.jsx)(n.a,{href:"https://substrate.stackexchange.com/questions/1659/how-to-have-a-mapping-in-a-custom-structure-inside-an-ink-contract",children:"Esta respuesta"})," explica en detalle por qu\xe9 no se permiten los mappings anidados."]}),"\n",(0,s.jsxs)(n.p,{children:["Por lo tanto desde ahora ser\xe1 necesaria una estructura de datos alternativa para solucionar este problema. Una estructura de datos que puede ser intercambiable con la sintaxis de ",(0,s.jsx)(n.code,{children:"Mapping"})," y con las implementaciones m\xednimas adicionales es el ",(0,s.jsx)(n.code,{children:"BTreeMap"}),". ",(0,s.jsx)(n.code,{children:"BTreeMap"})," es menos eficiente que ",(0,s.jsx)(n.code,{children:"Mapping"}),", pero es una soluci\xf3n simple hasta que se permitan los mappings anidados. Esto se utilizar\xe1 en el struct anidado. ",(0,s.jsx)(n.code,{children:"derive"}),"s adicionales deber\xe1n usarse para que sean compatibles con el struct #[ink(storage)] (ver abajo)"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-rust",children:'#[ink::contract]\r\nmod dao {\r\n\r\n    use ink_prelude::collections::BTreeMap;\r\n\r\n    #[ink::scale_derive(Encode, Decode, TypeInfo)]\r\n    #[derive(\r\n        SpreadLayout,\r\n        PackedLayout,\r\n        SpreadAllocate,\r\n    )]\r\n    #[cfg_attr(\r\n        feature = "std",\r\n        derive(ink_storage::traits::StorageLayout)\r\n    )]\r\n    pub struct Proposal {\r\n        voted_yes: BTreeMap<AccountId, bool>,\r\n    }\r\n\r\n    #[ink(storage)]\r\n    #[derive(SpreadAllocate)]\r\n    pub struct Dao {\r\n        proposals: Vec<Proposal>,\r\n        is_whitelisted: Mapping<AccountId, bool>,\r\n    }\r\n\r\n    impl Dao{\r\n        #[ink(constructor)]\r\n        pub fn new(/*...*/) -> Self {\r\n            //requerido para mappings\r\n            ink_lang::utils::initialize_contract(|contract| {/*...*/})\r\n        }\r\n    }\r\n}\n'})}),"\n",(0,s.jsxs)(n.p,{children:["Esto funciona casi como ser\xeda de esperar. Sin embargo a\xfan existe un problema. ",(0,s.jsx)(n.code,{children:"SpreadAllocate"})," (usado con ",(0,s.jsx)(n.code,{children:"Mapping"}),") requiere que ",(0,s.jsx)(n.code,{children:"Vec<Proposal>"})," implemente ",(0,s.jsx)(n.code,{children:"PackedAllocate"}),". Para solucionarlo, ",(0,s.jsx)(n.code,{children:"Proposal"})," necesita implementar ",(0,s.jsx)(n.code,{children:"PackedAllocate"}),". Ver ",(0,s.jsx)(n.a,{href:"https://docs.rs/ink_storage/3.3.1/ink_storage/traits/trait.PackedAllocate.html",children:"aqu\xed"})," para detalles + ejemplos. Ver lo siguiente para este ejemplo:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-rust",children:"use ink_primitives::Key;\r\n\r\npub struct Proposal {\r\n    voted_yes: BTreeMap<AccountId, bool>,\r\n}\r\n\r\nimpl ink_storage::traits::PackedAllocate for Proposal {\r\n    fn allocate_packed(&mut self, at: &Key){\r\n        PackedAllocate::allocate_packed(&mut *self, at)\r\n    }\r\n}\n"})}),"\n",(0,s.jsx)(n.h3,{id:"llamadas-entre-contratos",children:(0,s.jsx)(n.code,{children:"llamadas entre contratos"})}),"\n",(0,s.jsxs)(n.p,{children:["En ink!, para hacer ",(0,s.jsx)(n.a,{href:"https://use.ink/basics/cross-contract-calling",children:"llamadas entre contratos"}),", se necesitar\xe1 que el contrato sea agregado al proyecto. Asegurarse que el contrato est\xe9 exportando adecuadamente sus Structs. Ver el ejemplo de contrato ",(0,s.jsx)(n.code,{children:"erc20"}),":"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-rust",children:'#![cfg_attr(not(feature = "std"), no_std)]\r\n\r\nuse ink_lang as ink;\r\n\r\n// hacer visibles los structs\r\npub use self::erc20::{\r\n    Erc20,\r\n    // esto es necesario\r\n    Erc20Ref,\r\n};\r\n\r\n#[ink::contract]\r\npub mod erc20 {}\n'})}),"\n",(0,s.jsx)(n.p,{children:"En el Cargo.toml del nuevo contrato llamado, agregar (o editar) lo siguiente:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:'[lib]\r\nname = "erc20"\r\npath = "lib.rs"\r\ncrate-type = [\r\n\t# Usado para blobs Wasm de contrato normal.\r\n\t"cdylib",\r\n    # Usado para generaci\xf3n de ABI. Necesario para importar como dependencia\r\n    "rlib",\r\n]\r\n\r\n[features]\r\nink-as-dependency = []\n'})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"ink-as-dependency"}),' "le dice al generador de c\xf3digo ink! que siempre o nunca compile el smart contract como si fuera usado como dependencia de otro smart contract de ink!" (',(0,s.jsx)(n.a,{href:"https://use.ink/basics/cross-contract-calling",children:"fuente"}),")."]}),"\n",(0,s.jsx)(n.p,{children:"Entonces, en el Cargo.toml del contrato principal, importar el contrato al que se llamar\xe1."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-rust",children:'erc20 = { path = "erc20", default-features = false, features = ["ink-as-dependency"] }\n'})}),"\n",(0,s.jsxs)(n.p,{children:["Y asegurarse de agregarlo al campo ",(0,s.jsx)(n.code,{children:"std"})," del archivo .toml."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-rust",children:'[features]\r\ndefault = ["std"]\r\nstd = [\r\n    # ...\r\n\r\n    "erc20/std",\r\n]\n'})}),"\n",(0,s.jsx)(n.p,{children:"Ahora, importar el contrato llamado al contrato principal:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-rust",children:"// ejemplo\r\nuse erc20::Erc20Ref;\n"})}),"\n",(0,s.jsx)(n.p,{children:"Hay dos m\xe9todos para configurar el otro contrato."}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:["Instanciar el contrato llamado en el constructor del contrato principal.",(0,s.jsx)(n.br,{}),"\n","Ver ",(0,s.jsx)(n.a,{href:"https://use.ink/basics/cross-contract-calling/",children:"aqu\xed"})," para un tutorial, y ",(0,s.jsx)(n.a,{href:"https://github.com/paritytech/ink-examples/tree/main/upgradeable-contracts/delegator",children:"aqu\xed"})," para un ejemplo."]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:["O agregar el ",(0,s.jsx)(n.code,{children:"AccountId"})," de un contrato ya deployado.\r\nAqu\xed hay un ejemplo de constructor para configurar esto:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-rust",children:"use my_other_contract::MyOtherContractRef;\r\n// ...\r\nfn new(contract_id: AccountId) -> Self {\r\n     // para un contrato ya deployado\r\n     let contract_ref: MyOtherContractRef =\r\n         ink_env::call::FromAccountId::from_account_id(contract_id);\r\n     Self {contract_ref}\r\n}\n"})}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"Ahora para realizar la llamada de contratos:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-rust",children:"{\r\n    self.contract_ref.some_external_function(a_param);\r\n}\n"})}),"\n",(0,s.jsxs)(n.p,{children:["Nota: a partir de ahora (ink! v3.3.1), cuando se est\xe1 haciendo llamadas entre contratos, emitir eventos no funcionar\xe1 y ocurrir\xe1n errores de compilaci\xf3n. Ver ",(0,s.jsx)(n.a,{href:"https://github.com/paritytech/ink/issues/1000",children:"issue #1000"}),". Adem\xe1s el compilador dar\xe1 error diciendo (por ejemplo) Erc20Ref no implementa ",(0,s.jsx)(n.code,{children:"SpreadAllocate"}),". Este ",(0,s.jsx)(n.a,{href:"https://github.com/paritytech/ink/issues/1149",children:"issue #1149"})," explica m\xe1s y tiene una soluci\xf3n. Estos problemas ser\xe1n resueltos en ",(0,s.jsx)(n.a,{href:"https://github.com/paritytech/ink/issues/1134",children:"issue #1134"}),"."]}),"\n",(0,s.jsx)(n.h3,{id:"enviar-transacci\xf3n-gen\xe9rica--llamadas-din\xe1micas-entre-contratos",children:(0,s.jsx)(n.code,{children:"enviar transacci\xf3n gen\xe9rica / llamadas din\xe1micas entre contratos"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-c++",children:"// solidity\r\n\r\n// invoca una funci\xf3n encontrada en `addr`, env\xeda el `_amount` al `addr` y el payload de la `_transactionData`.\r\naddr.call.value(_amount)(_transactionData)\n"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-rust",children:"// ink!\r\n\r\n// ...\r\n\r\nuse ink_env::call::{\r\n    build_call,\r\n    Call,\r\n    ExecutionInput,\r\n    Selector,\r\n};\r\n\r\n/// Un wrapper que nos permite codificar un blob de bytes.\r\n///\r\n/// Usamos esto para pasar el conjunto de par\xe1metros no tipados (bytes) al `CallBuilder`.\r\nstruct CallInput<'a>(&'a [u8]);\r\n\r\nimpl<'a> scale::Encode for CallInput<'a> {\r\n    fn encode_to<T: Output + ?Sized>(&self, dest: &mut T) {\r\n        dest.write(self.0);\r\n    }\r\n}\r\n\r\n// ...\r\n\r\n// ver: https://github.com/paritytech/ink-examples/blob/main/multisig/lib.rs#L535\r\nfn invoke_transaction(\r\n    &mut self,\r\n    callee: AccountId,\r\n    transfer_amount: u128,\r\n    function_selector: [u8; 4],\r\n    transaction_data: Vec<u8>,\r\n    gas_limit: u64) -> Result<()> {\r\n\r\n    let result = build_call::<<Self as ::ink_lang::reflect::ContractEnv>::Env>()\r\n        .call_type(\r\n            Call::new()\r\n                .callee(callee) // contrato a llamar\r\n                .gas_limit(*gas_limit)\r\n                .transferred_value(transfer_amount), // valor a transferir con la llamada\r\n        )\r\n        .exec_input(\r\n            ExecutionInput::new(Selector::from(*function_selector))\r\n                    .push_arg(CallInput(transaction_data)), // par\xe1metros SCALE-encoded\r\n        )\r\n        .returns::<()>()\r\n        .fire()\r\n        .map_err(|_| Error::TransactionFailed);\r\n    result\r\n}\r\n\n"})}),"\n",(0,s.jsxs)(n.p,{children:["Nota: los bytes de ",(0,s.jsx)(n.code,{children:"function_selector"})," pueden encontrarse en el ",(0,s.jsx)(n.code,{children:"target/ink/<contract-name>.json"})," generado."]}),"\n",(0,s.jsx)(n.h2,{id:"limitaciones-de-ink-v3",children:"Limitaciones de ink! v3"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["Los proyectos multi archivo no son soportados con ink! puro.","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"implementar traits / interfaces no funcionar\xe1"}),"\n",(0,s.jsx)(n.li,{children:"Hay alternativas que agregar\xe1n esta funcionalidad tal como OpenBrush"}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.li,{children:"Structs anidados y estructuras de datos ser\xe1n dif\xedciles de usar."}),"\n",(0,s.jsxs)(n.li,{children:["Las llamadas entre contratos evitar\xe1n que los eventos sean emitidos. Ver ",(0,s.jsx)(n.a,{href:"https://github.com/paritytech/ink/issues/1000",children:"aqu\xed"})," para detalles."]}),"\n",(0,s.jsx)(n.li,{children:"Las llamadas entre contratos no pueden ser testeadas off-chain con tests unitarios.\r\nSe necesitar\xe1 utilizar tests de integraci\xf3n On-chain."}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"soluci\xf3n-de-problemas-y-errores",children:"Soluci\xf3n de problemas y errores"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.code,{children:"ERROR: Validation of the Wasm failed."})}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"ERROR: Validation of the Wasm failed.\r\n\r\nERROR: An unexpected panic function import was found in the contract Wasm.\r\nThis typically goes back to a known bug in the Rust compiler:\r\nhttps://github.com/rust-lang/rust/issues/78744\r\n\r\nAs a workaround try to insert `overflow-checks = false` into your `Cargo.toml`.\r\nThis will disable safe math operations, but unfortunately we are currently not\r\naware of a better workaround until the bug in the compiler is fixed.\n"})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Soluci\xf3n"}),(0,s.jsx)(n.br,{}),"\n","Agregar lo siguiente al Cargo.toml del contrato:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"[profile.release]\r\noverflow-checks = false\n"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.code,{children:"\"failed to load bitcode of module '...' \""})}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"Esto sucede cuando se est\xe1 intentando importar un contrato para llamadas entre contratos."}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Soluci\xf3n"}),(0,s.jsx)(n.br,{}),"\n","Asegurarse que lo siguiente se agregue a la importaci\xf3n del Cargo.toml del contrato:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:'features = ["ink-as-dependency"]\n'})}),"\n",(0,s.jsx)(n.p,{children:"por lo tanto la importaci\xf3n se ver\xeda as\xed:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:'mycontract = { path = "mycontract/", default-features = false, features = ["ink-as-dependency"]}\n'})}),"\n",(0,s.jsx)(n.h2,{id:"unit-testing-off-chain",children:"unit testing (off-chain)"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Los unit tests son una parte integral del desarrollo de un smart contract y garantizan que el c\xf3digo funciona off-chain antes de testearlo on-chain."}),"\n",(0,s.jsxs)(n.li,{children:["Para ejecutar tests de ink!, ",(0,s.jsx)(n.em,{children:"no"})," usar ",(0,s.jsx)(n.code,{children:"cargo +nightly contract test"}),". Usar ",(0,s.jsx)(n.code,{children:"cargo +nightly test"}),". Agregar el indicador ",(0,s.jsx)(n.code,{children:"--nocapture"})," para mostrar los prints de debug. Ver ",(0,s.jsx)(n.a,{href:"https://substrate.stackexchange.com/questions/3197/how-to-understand-which-test-failed-in-ink",children:"aqu\xed"})," para m\xe1s informaci\xf3n sobre las razones."]}),"\n",(0,s.jsx)(n.li,{children:"Desde el m\xf3dulo del contrato, asegurarse que se hace p\xfablico el struct del contrato y cualquier otra cosa que se use en el test de unidad.\r\nPor ejemplo:"}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-rust",children:'// tope del archivo\r\n#![cfg_attr(not(feature = "std"), no_std)]\r\n\r\nuse ink_lang as ink;\r\n\r\npub use self::mycontract::{\r\n    MyContract\r\n};\n'})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Los unit tests Off-chain no funcionar\xe1n con las llamadas entre contratos.\r\nUna soluci\xf3n para asegurarse que los unit tests est\xe1n pasando es proveer datos simulados."}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["Un enfoque sencillo es usar una compilaci\xf3n condicional con ",(0,s.jsx)(n.code,{children:"#[cfg(test)]"})," y ",(0,s.jsx)(n.code,{children:"#[cfg(not(test))]"}),"."]}),"\n",(0,s.jsx)(n.p,{children:"Nota: Esta soluci\xf3n no es ideal. ink! v4.0 proveer\xe1 soluciones mucho mejores."}),"\n",(0,s.jsx)(n.p,{children:"Por ejemplo, aqu\xed hay una llamada entre contratos ERC20 s\xf3lo modo lectura:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-rust",children:"// s\xf3lo compila cuando no est\xe1 ejecutando tests\r\n#[cfg(not(test))]\r\nfn get_token_balance(&self, caller: &AccountId) -> Balance {\r\n    // llama al contrato externo ERC-20 \r\n    self.token.balance_of(*caller)\r\n}\r\n\r\n// s\xf3lo compila cuando est\xe1 ejecutando tests\r\n#[cfg(test)]\r\nfn get_token_balance(&self, _: &AccountId) -> Balance {\r\n    // valor arbitrario\r\n    1\r\n}\n"})}),"\n",(0,s.jsxs)(n.p,{children:["Y si la llamada entre contratos ",(0,s.jsx)(n.em,{children:"escribe"})," en el storage, un campo simulado puede agregase al struct del contrato. Por ejemplo:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-rust",children:"#[ink(storage)]\r\npub struct MyContract {\r\n    #[cfg(test)]\r\n    mock_field: SomeStruct, // servir\xe1 como un storage falso\r\n}\r\n\r\n...\r\n\r\n// on-chain, ejecuta llamadas entre contratos \r\n#[cfg(not(test))]\r\nfn do_some_write(&mut self) {\r\n    self.external_contract.write_to_field(0xDEADBEEF);\r\n}\r\n\r\n\r\n// s\xf3lo para ambiente de testing\r\n#[cfg(test)]\r\nfn do_some_write(&mut self) {\r\n    self.mock_field.my_fake_storage_item = 0xDEADBEEF;\r\n}\n"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"c\xf3digo \xfatil para interactuar y modificar el ambiente del contrato para testing"}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.a,{href:"https://paritytech.github.io/ink/ink_env/test/index.html",children:"ink_env docs"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-rust",children:"// obtener las cuentas default (alice, bob, ...)\r\nlet accounts = ink_env::test::default_accounts::<ink_env::DefaultEnvironment>();\r\naccounts.alice //ejemplo de uso\r\n\r\n// establecer cu\xe1l cuenta llama al contrato\r\nink_env::test::set_caller::<ink_env::DefaultEnvironment>(accounts.bob);\r\n\r\n// obtener la direcci\xf3n del contrato\r\nlet callee = ink_env::account_id::<ink_env::DefaultEnvironment>();\r\n\r\n// establecer la direcci\xf3n del contrato\r\n// por default, \xe9sta es la cuenta de alice\r\nink_env::test::set_callee::<ink_env::DefaultEnvironment>(callee);\r\n\r\n// transferir la moneda nativa al contrato \r\nink_env::test::set_value_transferred::<ink_env::DefaultEnvironment>(2);\r\n\r\n// aumentar el n\xfamero de bloque (y el timestamp del bloque).\r\n// esto puede ser colocado en un bucle para adelantar el bloque varias veces\r\nink_env::test::advance_block::<ink_env::DefaultEnvironment>();\r\n\r\n// generar un AccountId arbitrario\r\nAccountId::from([0x01; 32]);\r\n\r\n// generar un Hash arbitrario \r\nHash::from([0x01; 32])\r\n\r\n// macro para tests que se espera que entren en panic.\r\n#[should_panic]\n"})})]})}function u(e={}){const{wrapper:n}={...(0,a.M)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},4552:(e,n,r)=>{r.d(n,{I:()=>t,M:()=>l});var s=r(11504);const a={},i=s.createContext(a);function l(e){const n=s.useContext(i);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function t(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:l(e.components),s.createElement(i.Provider,{value:n},e.children)}}}]);