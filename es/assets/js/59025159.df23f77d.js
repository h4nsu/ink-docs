"use strict";(self.webpackChunkink_docs=self.webpackChunkink_docs||[]).push([[927],{26294:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>o,default:()=>u,frontMatter:()=>i,metadata:()=>s,toc:()=>d});var r=t(74848),a=t(28453);const i={title:"Crear un proyecto ink!",slug:"/getting-started/creating-an-ink-project",hide_title:!0},o="Crear un proyecto ink!",s={id:"getting-started/creating",title:"Crear un proyecto ink!",description:"ink! es un Lenguaje espec\xedfico de dominio incorporado (EDSL) que puedes utilizar para escribir smart contracts basados en WebAssembly con el lenguage de programaci\xf3n Rust.",source:"@site/i18n/es/docusaurus-plugin-content-docs/version-5.x/getting-started/creating.md",sourceDirName:"getting-started",slug:"/getting-started/creating-an-ink-project",permalink:"/es/5.x/getting-started/creating-an-ink-project",draft:!1,unlisted:!1,editUrl:"https://github.com/paritytech/ink-docs/edit/master/versioned_docs/version-5.x/getting-started/creating.md",tags:[],version:"5.x",frontMatter:{title:"Crear un proyecto ink!",slug:"/getting-started/creating-an-ink-project",hide_title:!0},sidebar:"reference",previous:{title:"Configuraci\xf3n",permalink:"/es/5.x/getting-started/setup"},next:{title:"Compilar tu Contrato",permalink:"/es/5.x/getting-started/building-your-contract"}},c={},d=[{value:"C\xf3digo fuente del Contrato",id:"c\xf3digo-fuente-del-contrato",level:2},{value:"Prueba tu contracto",id:"prueba-tu-contracto",level:2}];function l(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",p:"p",pre:"pre",strong:"strong",...(0,a.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)("img",{src:"/img/title/heart.svg",className:"titlePic"}),"\n",(0,r.jsx)(n.h1,{id:"crear-un-proyecto-ink",children:"Crear un proyecto ink!"}),"\n",(0,r.jsxs)(n.p,{children:["ink! es un ",(0,r.jsx)(n.a,{href:"https://wiki.haskell.org/Embedded_domain_specific_language",children:"Lenguaje espec\xedfico de dominio incorporado"})," (EDSL) que puedes utilizar para escribir smart contracts basados en WebAssembly con el lenguage de programaci\xf3n Rust."]}),"\n",(0,r.jsxs)(n.p,{children:['ink! es solo est\xe1ndar Rust con un "formato de contrato" bien definido con attribute macros ',(0,r.jsx)(n.code,{children:"#[ink(\u2026)]"})," especializadas. Estos attribute macros le especifican a ink! que representan las diferentes partes que un smart contract en Rust representan, y finalmente permite a ink! hacer toda la magia necesaria para crear Wasm bytecode compatible con Substrate!"]}),"\n",(0,r.jsx)(n.p,{children:"Utiliza ink! CLI para generar un smart contract inicial con c\xf3digo de ejemplo."}),"\n",(0,r.jsx)(n.p,{children:"Asegurate que estas en tu directorio de trabajo y ejecuta:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"cargo contract new flipper\n"})}),"\n",(0,r.jsxs)(n.p,{children:["Este comando crea una nueva carpeta en el proyecto llamada ",(0,r.jsx)(n.code,{children:"flipper"})," con este contenido:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"flipper\n  \u2514\u2500 lib.rs                <-- C\xf3digo fuente del Contrato\n  \u2514\u2500 Cargo.toml            <-- Dependencies Rust y Configuraci\xf3n ink! \n  \u2514\u2500 .gitignore\n"})}),"\n",(0,r.jsx)(n.h2,{id:"c\xf3digo-fuente-del-contrato",children:"C\xf3digo fuente del Contrato"}),"\n",(0,r.jsx)(n.p,{children:'El CLI de ink generara automaticament el c\xf3digo fuente para el contrato "Flipper", que es el smart contract m\xe1s simple que puedes construir. Puede echar un vistazo a lo que vendr\xe1 mirando el c\xf3digo fuente aqu\xed:'}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.a,{href:"https://github.com/paritytech/ink/blob/v3.0.0-rc8/examples/flipper/lib.rs",children:"Flipper C\xf3digo fuente de ejemplo"})}),"\n",(0,r.jsxs)(n.p,{children:["El contrato Flipper no es m\xe1s que un ",(0,r.jsx)(n.code,{children:"bool"})," que cambia de ",(0,r.jsx)(n.code,{children:"true"})," a ",(0,r.jsx)(n.code,{children:"false"})," mediante la funci\xf3n ",(0,r.jsx)(n.code,{children:"flip()"})," ."]}),"\n",(0,r.jsx)(n.h2,{id:"prueba-tu-contracto",children:"Prueba tu contracto"}),"\n",(0,r.jsxs)(n.p,{children:["Al final del c\xf3digo fuente ver\xe1s un simple test case que verifica la funcionalidad del contrat. Podemos probar r\xe1pidamente que este c\xf3digo esta funcionando como se espera utilizando el ",(0,r.jsx)(n.strong,{children:"off-chain test environment"})," que ink! proporciona."]}),"\n",(0,r.jsx)(n.p,{children:"En la carpeta de tu proyecto ejecuta:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"cargo test\n"})}),"\n",(0,r.jsx)(n.p,{children:"Ver\xe1s la ejecuci\xf3n satisfactoria del test:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"$ cargo test\nrunning 2 tests\ntest flipper::tests::it_works ... ok\ntest flipper::tests::default_works ... ok\n\ntest result: ok. 2 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out\n"})}),"\n",(0,r.jsx)(n.p,{children:"Ahora que estamos seguros de que todo funciona, podemos compilar este contrato en Wasm en el siguiente paso."})]})}function u(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(l,{...e})}):l(e)}},28453:(e,n,t)=>{t.d(n,{R:()=>o,x:()=>s});var r=t(96540);const a={},i=r.createContext(a);function o(e){const n=r.useContext(i);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:o(e.components),r.createElement(i.Provider,{value:n},e.children)}}}]);