"use strict";(self.webpackChunkink_docs=self.webpackChunkink_docs||[]).push([[2404],{71788:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>i,default:()=>u,frontMatter:()=>o,metadata:()=>r,toc:()=>l});var s=t(17624),a=t(4552);const o={title:"Testing del Contrato",hide_title:!0,slug:"/basics/contract-testing"},i="Contract Testing",r={id:"basics/testing",title:"Testing del Contrato",description:"ink! soporta tres diferentes etapas de testing: unitarios, de integraci\xf3n",source:"@site/i18n/es/docusaurus-plugin-content-docs/current/basics/testing.md",sourceDirName:"basics",slug:"/basics/contract-testing",permalink:"/es/basics/contract-testing",draft:!1,unlisted:!1,editUrl:"https://github.com/paritytech/ink-docs/edit/master/docs/basics/testing.md",tags:[],version:"current",frontMatter:{title:"Testing del Contrato",hide_title:!0,slug:"/basics/contract-testing"},sidebar:"reference",previous:{title:"Metadata",permalink:"/es/metadata"},next:{title:"Contract Debugging",permalink:"/es/basics/contract-debugging"}},c={},l=[{value:"Tests Unitarios",id:"tests-unitarios",level:2},{value:"Off-chain Testing",id:"off-chain-testing",level:2},{value:"\xbfC\xf3mo saber si su test requiere el entorno off-chain?",id:"c\xf3mo-saber-si-su-test-requiere-el-entorno-off-chain",level:3},{value:"Ejemplo",id:"ejemplo",level:3},{value:"End-to-End (E2E) Tests",id:"end-to-end-e2e-tests",level:2},{value:"Ejemplo",id:"ejemplo-1",level:3}];function d(e){const n={a:"a",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",p:"p",pre:"pre",...(0,a.M)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)("img",{src:"/img/title/testing1.svg",className:"titlePic"}),"\n",(0,s.jsx)(n.h1,{id:"contract-testing",children:"Contract Testing"}),"\n",(0,s.jsx)(n.p,{children:"ink! soporta tres diferentes etapas de testing: unitarios, de integraci\xf3n\ny tests end-to-end. En esta p\xe1gina explicaremos cual es el proposito de cada\netapa y como utilizarlas."}),"\n",(0,s.jsx)("img",{src:"/img/testing.png"}),"\n",(0,s.jsx)(n.p,{children:"Generalmente puedes pensar en estos tres tipos de testing como una piramide\ndonde el top es el m\xe1s elaborados de los tests. Los tests End-to-End (E2E)\nen el top testearan las capas m\xe1s bajas de la piramide como parte de ellos."}),"\n",(0,s.jsx)(n.h2,{id:"tests-unitarios",children:"Tests Unitarios"}),"\n",(0,s.jsxs)(n.p,{children:["El testing de los contractos off-chain se hace mediante ",(0,s.jsx)(n.code,{children:"cargo test"})," y los usuarios pueden simplemente utilizar las rutinas est\xe1ndar para\ncrear m\xf3dulos de unit test dentro del projecto de ink!:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-rust",children:"#[cfg(test)]\nmod tests {\n    use super::*;\n\n    #[test]\n    fn my_test() { ... }\n}\n"})}),"\n",(0,s.jsx)(n.p,{children:"Se pueden crear instancias de test de los contratos as\xed:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-rust",children:"let contract = MyContract::my_constructor(a, b);\n"})}),"\n",(0,s.jsxs)(n.p,{children:["Los mensajes se pueden llamar simplemente en la instancia devuelta como si ",(0,s.jsx)(n.code,{children:"MyContract::my_constructor"})," devolviese\nuna instancia ",(0,s.jsx)(n.code,{children:"Self"}),"."]}),"\n",(0,s.jsxs)(n.p,{children:["Vea el ",(0,s.jsx)(n.a,{href:"https://github.com/paritytech/ink-examples/blob/main/flipper/lib.rs",children:"ejemplo flipper"}),"."]}),"\n",(0,s.jsx)(n.h2,{id:"off-chain-testing",children:"Off-chain Testing"}),"\n",(0,s.jsxs)(n.p,{children:["Para tests de integraci\xf3n, el test se anota con nuestro atributo ",(0,s.jsx)(n.code,{children:"#[ink::test]"}),"\nen lugar del ",(0,s.jsx)(n.code,{children:"#[test]"}),". Nuestro atributo denota que el test se ejecuta\nen un entorno simulado, en un mocked blockchain. Aqu\xed est\xe1n las funciones disponibles\npara influenciar en como el entorno del test es configurado (por ejemplo configurar un balance espec\xedfico\nde una cuenta para simular como el contrato se comportaria al interaccionar con el)."]}),"\n",(0,s.jsx)(n.p,{children:"Si anotas un test con este atributo se ejecutara en un entorno simulado,\nsimilar a como se ejecutar\xeda on-chain.\nEntonces tienes un control detallado sobre c\xf3mo llamar al contrato;\npor ejemplo puedes influir en el avance del bloque, el valor transferido al mismo,\npor qu\xe9 cuenta se llama, con qu\xe9 almacenamiento se ejecuta, etc."}),"\n",(0,s.jsxs)(n.p,{children:["Vea el contrato ",(0,s.jsx)(n.a,{href:"https://github.com/paritytech/ink-examples/blob/main/erc20/lib.rs",children:(0,s.jsx)(n.code,{children:"examples/erc20"})})," csobre como utilizarlo o ",(0,s.jsx)(n.a,{href:"https://docs.rs/ink/4.0.0/ink/attr.test.html",children:"la documentaci\xf3n"})," para m\xe1s detalles."]}),"\n",(0,s.jsx)(n.p,{children:"En este momento hay algunas limitaciones conocidas para nuestro entorno off-chain y estamos trabajando\nen hacer que el comportamiento sea lo m\xe1s cercano posible a un entorno de una red real."}),"\n",(0,s.jsx)(n.p,{children:"Define un unit test que utilice las capacidades del ink! testing off-chain."}),"\n",(0,s.jsx)(n.p,{children:"Si tu unit test no requiere de la existencia de un entorno off-chain esta bien no\nutilizar esta macro ya que tiene algunos gastos generales con el test."}),"\n",(0,s.jsx)(n.p,{children:"Date cuenta que esta macro no es necesaria para ejecutar los unit tests que requieren\nlas capacidades del ink! testing off-chain pero simplemente mejora la legibilidad del c\xf3digo."}),"\n",(0,s.jsx)(n.h3,{id:"c\xf3mo-saber-si-su-test-requiere-el-entorno-off-chain",children:"\xbfC\xf3mo saber si su test requiere el entorno off-chain?"}),"\n",(0,s.jsxs)(n.p,{children:["Normalmente si el test utiliza recursivamente o invoca algunos metodos del contrato que\nllaman a un metodo definido en ",(0,s.jsx)(n.code,{children:"self.env()"})," o ",(0,s.jsx)(n.code,{children:"Self::env()"}),"."]}),"\n",(0,s.jsx)(n.p,{children:"Un ejemplo es el siguiente:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-rust",children:"let caller: AccountId = self.env().caller();\n"})}),"\n",(0,s.jsx)(n.h3,{id:"ejemplo",children:"Ejemplo"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-rust",children:"#[cfg(test)]\nmod tests {\n    // Conventional unit test that works with assertions.\n    #[ink::test]\n    fn test1() {\n        // test code comes here as usual\n    }\n\n    // Unit test convencional que devuelve alg\xfan Result.\n    // El c\xf3digo del test puede utilizar el operador-`?`.\n    #[ink::test]\n    fn test2() -> Result<(), ink::env::Error> {\n        // El c\xf3digo del test que devuelve un tipo Rust Result\n    }\n}\n"})}),"\n",(0,s.jsx)(n.h2,{id:"end-to-end-e2e-tests",children:"End-to-End (E2E) Tests"}),"\n",(0,s.jsxs)(n.p,{children:["El testing E2E permite a los desarroladores escribir un test que no solo testeara el contrato de\nmanera aislada; en su lugar el contrato sera testado ",(0,s.jsx)(n.em,{children:"todo junto"})," con todos los componentes\nque est\xe1n involucrados on-chain \u2013 por lo que de extremo a extremo (end to end). De esta manera el testing This way of testing se parece mucho c\xf3mo se comportar\xe1 realmente el contrato en la producci\xf3n."]}),"\n",(0,s.jsx)(n.p,{children:"Como parte del test, el contrato sera compilado y desplegado a un nodo Substrate node que este corriendo en el background.\nink! ofrece funciones API que permiten a los desarrolladores interaccionar con el contrato via transacciones\nque ellos crean y cargan en la blockchain."}),"\n",(0,s.jsx)(n.p,{children:"T\xfa, como desarrollador, puede definir aserciones sobre el resultado de sus transacciones, como la verificaci\xf3n de mutaciones de estado, transaccione fallidas o costos de gas incurridos."}),"\n",(0,s.jsx)(n.p,{children:"La configuraci\xf3n de tu cadena sera testeada junto al smart contract. Y si tu cadena tiene pallets que\nestan involucrados con la ejecuci\xf3n del smart contract, estos tambi\xe9n seran parte de la ejecuci\xf3n del test."}),"\n",(0,s.jsx)(n.p,{children:"ink! no pone ning\xfan requerimiento para el nodo Substrate en el background - por ejemplo,\npuedes correr un nodo que contiene una instant\xe1nea de una red en vivo."}),"\n",(0,s.jsx)(n.h3,{id:"ejemplo-1",children:"Ejemplo"}),"\n",(0,s.jsxs)(n.p,{children:["El c\xf3digo de ejemplo a continuaci\xf3n ilustra un test b\xe1sico E2E para el\n",(0,s.jsx)(n.a,{href:"https://github.com/paritytech/ink-examples/blob/main/flipper/lib.rs",children:"ejemplo flipper"}),"."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-rust",children:'#[ink_e2e::test]\nasync fn default_works(mut client: ink_e2e::Client<C, E>) -> E2EResult<()> {\n    // Cuando se ingresa la funci\xf3n, el contrato ya estaba\n    // construido en el background via `cargo contract build`.\n    // El objeto `client`expone una interfaz para interactuar\n    // con el nodo Substrate.\n    \n    // dado\n    let constructor = FlipperRef::new_default();\n\n    // cuando\n    let contract_acc_id = client\n        .instantiate("flipper", &ink_e2e::bob(), constructor, 0, None)\n        .await\n        .expect("instantiate failed")\n        .account_id;\n\n    // entonces\n    let get = build_message::<FlipperRef>(contract_acc_id.clone())\n        .call(|flipper| flipper.get());\n    let get_res = client\n        .call(&ink_e2e::bob(), get, 0, None)\n        .await\n        .expect("get failed");\n    assert!(matches!(get_res.return_value(), false));\n\n    Ok(())\n}\n'})}),"\n",(0,s.jsxs)(n.p,{children:["Puedes correr el test de arriba yendo a la carpeta ",(0,s.jsx)(n.code,{children:"flipper"})," en\n",(0,s.jsx)(n.a,{href:"https://github.com/paritytech/ink-examples/tree/main",children:"el directorio ink! examples"}),"."]}),"\n",(0,s.jsxs)(n.p,{children:["Antes de que puedas arrancar el test, tienes que arrancar un nodo Substrate\ncon ",(0,s.jsx)(n.code,{children:"pallet-contracts"})," en el background.\nPara esto puedes utilizar por ejemplo nuestro",(0,s.jsx)(n.a,{href:"https://github.com/paritytech/substrate-contracts-node",children:(0,s.jsx)(n.code,{children:"substrate-contracts-node"})}),". Arranca el nodo en una terminal/sesi\xf3n shell via"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"substrate-contracts-node\n"})}),"\n",(0,s.jsx)(n.p,{children:"Entonces, mientras el nodo este corriendo ejecuta el siguiente comando\nen otra ventana la terminal/sesi\xf3n shell con:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"cargo test --features e2e-tests\n"})})]})}function u(e={}){const{wrapper:n}={...(0,a.M)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},4552:(e,n,t)=>{t.d(n,{I:()=>r,M:()=>i});var s=t(11504);const a={},o=s.createContext(a);function i(e){const n=s.useContext(o);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:i(e.components),s.createElement(o.Provider,{value:n},e.children)}}}]);