"use strict";(self.webpackChunkink_docs=self.webpackChunkink_docs||[]).push([[4264],{73148:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>i,contentTitle:()=>a,default:()=>d,frontMatter:()=>r,metadata:()=>u,toc:()=>c});var s=n(17624),o=n(4552);const r={title:"useTimestampQuery",description:"A React hook for getting a function that can be used to fetch timestamp data."},a="useTimestampQuery",u={id:"frontend/react/hooks/substrate/use-timestamp-query",title:"useTimestampQuery",description:"A React hook for getting a function that can be used to fetch timestamp data.",source:"@site/docs/frontend/react/hooks/substrate/use-timestamp-query.md",sourceDirName:"frontend/react/hooks/substrate",slug:"/frontend/react/hooks/substrate/use-timestamp-query",permalink:"/es/frontend/react/hooks/substrate/use-timestamp-query",draft:!1,unlisted:!1,editUrl:"https://github.com/paritytech/ink-docs/edit/master/docs/frontend/react/hooks/substrate/use-timestamp-query.md",tags:[],version:"current",frontMatter:{title:"useTimestampQuery",description:"A React hook for getting a function that can be used to fetch timestamp data."},sidebar:"reference",previous:{title:"useTimestampNow",permalink:"/es/frontend/react/hooks/substrate/use-timestamp-now"},next:{title:"useUnixMilliToDate",permalink:"/es/frontend/react/hooks/helpers/use-unix-milli-to-date"}},i={},c=[{value:"Usage",id:"usage",level:2},{value:"Return Value",id:"return-value",level:2}];function m(e){const t={code:"code",h1:"h1",h2:"h2",p:"p",pre:"pre",...(0,o.M)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(t.h1,{id:"usetimestampquery",children:"useTimestampQuery"}),"\n",(0,s.jsx)(t.p,{children:"A React hook for getting a function that can be used to fetch timestamp data."}),"\n",(0,s.jsx)(t.h2,{id:"usage",children:"Usage"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-tsx",children:"import { useTimestampQuery } from 'useink'\n\nfunction Query() {\n  const q = useTimestampQuery('phala');\n  const b = useBlockNumber();\n\n  // see `useTimestampNow` and `useTimestampDate`, which does this for you.\n  const now = useMemo(() => {\n    return await q.now();\n  }, [b.blockNumber])\n\n  console.log(now);\n\n  return <p>{now}</p>;\n}\n"})}),"\n",(0,s.jsx)(t.h2,{id:"return-value",children:"Return Value"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-ts",children:"QueryableModuleCalls<'promise'> | undefined\n"})})]})}function d(e={}){const{wrapper:t}={...(0,o.M)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(m,{...e})}):m(e)}},4552:(e,t,n)=>{n.d(t,{I:()=>u,M:()=>a});var s=n(11504);const o={},r=s.createContext(o);function a(e){const t=s.useContext(r);return s.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function u(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:a(e.components),s.createElement(r.Provider,{value:t},e.children)}}}]);