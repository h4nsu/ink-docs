"use strict";(self.webpackChunkink_docs=self.webpackChunkink_docs||[]).push([[4300],{76752:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>r,default:()=>u,frontMatter:()=>a,metadata:()=>s,toc:()=>d});var o=t(17624),i=t(4552);const a={title:"Configuration",description:"Learn about what configurations and defaults are available in useink"},r="Configuration",s={id:"frontend/configuration",title:"Configuration",description:"Learn about what configurations and defaults are available in useink",source:"@site/docs/frontend/configuration.md",sourceDirName:"frontend",slug:"/frontend/configuration",permalink:"/es/frontend/configuration",draft:!1,unlisted:!1,editUrl:"https://github.com/paritytech/ink-docs/edit/master/docs/frontend/configuration.md",tags:[],version:"current",frontMatter:{title:"Configuration",description:"Learn about what configurations and defaults are available in useink"},sidebar:"reference",previous:{title:"useUnixMilliToDate",permalink:"/es/frontend/react/hooks/helpers/use-unix-milli-to-date"},next:{title:"Overview",permalink:"/es/frontend/core/overview"}},c={},d=[{value:"ConfigProps",id:"configprops",level:2},{value:"Adding a Custom Chain Config",id:"adding-a-custom-chain-config",level:2}];function l(e){const n={code:"code",h1:"h1",h2:"h2",p:"p",pre:"pre",...(0,i.M)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.h1,{id:"configuration",children:"Configuration"}),"\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.code,{children:"UseInkProvider"})," takes props of type ",(0,o.jsx)(n.code,{children:"ConfigProps"}),"."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-tsx",children:"import { UseInkProvider } from 'useink';\nimport { RococoContractsTestnet } from 'useink/chains';\n\nfunction App({ children }) {\n  const config = {\n    chains: [RococoContractsTestnet],\n    caller: {\n      // An optional default caller address to be used before a user connects their wallet.\n      default: \"5EyR7vEk7DtvEWeefGcXXMV6hKwB8Ex5uvjHufm466mbjJkR\", \n    }\n  }\n\n  return (\n    <UseInkProvider config={config}>\n      <MyRoutes />\n    </UseInkProvider>\n  );\n}\n\nexport default App\n"})}),"\n",(0,o.jsx)(n.h2,{id:"configprops",children:"ConfigProps"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-ts",children:"export type ConfigProps = {\n  // dappName: This is the name that is displayed when a user first connects their wallet.\n  // It is also the key used for localStorage in some features.\n  dappName?: string; \n  // chains: see `useink/chains` for more chain configurations. \n  chains: ArrayOneOrMore<Chain>; \n  // caller: If you want to read from the blockchain before a user connect's their wallet \n  // then you can set a default caller address globally or on a per chain basis. When making \n  // a call to a contract the priority level of which address to use will be:\n  // 1. The address of the user's connected wallet\n  // 2. The address for the chain specified in this config for the chainId. e.g. { astar: '5E.....' }\n  // 3. The address for the chain specified in `caller.default` in this config.\n  // If this `caller` is omitted in the config then a user must connect their wallet before they can \n  // call a contract message. \n  // NOTE: Default caller addresses cannot be used for transactions, which require a signature.\n  // See https://use.ink/frontend/react/hooks/contracts/use-call and related hooks for examples.\n  caller?: {\n    default?: string; // Set the default for all chains that do not have a \n  } & Partial<Result<ChainId, string>>;\n  events?: { \n    // expiration: Time in milliseconds before an event is removed from state.\n    // This is used in the useEvent() hook for contracts\n    // Set to 0 to prevent events from being removed from state\n    // Default: 5000 (5 seconds)\n    expiration?: number; \n    // checkInterval: The amount of time to wait before checking which events need to be removed.\n    checkInterval?: number; \n  };\n  wallet?: {\n    // skipAutoConnect: Skip a dApp from using localStorage to restore a previously connected account\n    // Default: true\n    skipAutoConnect?: boolean; \n  };\n};\n"})}),"\n",(0,o.jsx)(n.h2,{id:"adding-a-custom-chain-config",children:"Adding a Custom Chain Config"}),"\n",(0,o.jsxs)(n.p,{children:["You can add your own chain config by modifying the ",(0,o.jsx)(n.code,{children:"Custom"})," chain config. e.g."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-tsx",children:"import { UseInkProvider } from 'useink';\nimport { Custom, Chain } from 'useink/chains';\n\nconst MyChain: Chain = {\n  ...Custom,\n  // NOTE: The value of 'id' should be 'custom'. ChainId must be of a known value that we \n  // have already defined in useink/chains. We do this because chainId is used as an \n  // argument in many hooks and we want to prevent bugs due to mispelled chain names. \n  // For example: `useBlockHeader('astart')` would return undefined because `astart` \n  // is not a chainId. `astar` is the correct name. ChainId has known values so that \n  // TypeScript will show you your error before runtime.\n  id: 'custom', \n  name: 'My New Blockchain',\n  rpcs: ['wss://my-new-rpc.xyz'],\n}\n\n\nfunction App({ children }) {\n  return (\n    <UseInkProvider config={{ chains: [MyChain] }}>\n      <MyRoutes />\n    </UseInkProvider>\n  );\n}\n\nexport default App\n"})}),"\n",(0,o.jsxs)(n.p,{children:["Using the above config you can call hooks with or without the ",(0,o.jsx)(n.code,{children:"chainId"})," as an argument."]}),"\n",(0,o.jsxs)(n.p,{children:["e.g. ",(0,o.jsx)(n.code,{children:"useBlockHeaders()"})," (defaults to 'custom') or ",(0,o.jsx)(n.code,{children:"useBlockHeaders('custom')"})]})]})}function u(e={}){const{wrapper:n}={...(0,i.M)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(l,{...e})}):l(e)}},4552:(e,n,t)=>{t.d(n,{I:()=>s,M:()=>r});var o=t(11504);const i={},a=o.createContext(i);function r(e){const n=o.useContext(a);return o.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:r(e.components),o.createElement(a.Provider,{value:n},e.children)}}}]);