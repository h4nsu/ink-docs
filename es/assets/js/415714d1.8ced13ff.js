"use strict";(self.webpackChunkink_docs=self.webpackChunkink_docs||[]).push([[9680],{2212:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>c,contentTitle:()=>r,default:()=>u,frontMatter:()=>o,metadata:()=>i,toc:()=>l});var a=s(74848),t=s(28453);const o={title:"Almacenando Valores",slug:"/basics/storing-values",hide_title:!0},r="Almacenando Valores",i={id:"basics/storing-values",title:"Almacenando Valores",description:"As\xed es como se almacenan valores simples en el storage:",source:"@site/i18n/es/docusaurus-plugin-content-docs/current/basics/storing-values.md",sourceDirName:"basics",slug:"/basics/storing-values",permalink:"/es/basics/storing-values",draft:!1,unlisted:!1,editUrl:"https://github.com/paritytech/ink-docs/edit/master/docs/basics/storing-values.md",tags:[],version:"current",frontMatter:{title:"Almacenando Valores",slug:"/basics/storing-values",hide_title:!0},sidebar:"reference",previous:{title:"Plantilla de un Contrato",permalink:"/es/basics/contract-template"},next:{title:"Leer Valores del Storage",permalink:"/es/basics/leer-valores-del-storage"}},c={},l=[{value:"Tipos Soportados",id:"tipos-soportados",level:2},{value:"String, Vec y m\xe1s",id:"string-vec-y-m\xe1s",level:3},{value:"Mapping",id:"mapping",level:3},{value:"Substrate Types",id:"substrate-types",level:3},{value:"Enum",id:"enum",level:3},{value:"Struct",id:"struct",level:3},{value:"Use of enum",id:"use-of-enum",level:2},{value:"Inicializar Storage en Constructores",id:"inicializar-storage-en-constructores",level:2}];function d(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",p:"p",pre:"pre",...(0,t.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)("img",{src:"/img/title/storage.svg",className:"titlePic"}),"\n",(0,a.jsx)(n.h1,{id:"almacenando-valores",children:"Almacenando Valores"}),"\n",(0,a.jsxs)(n.p,{children:["As\xed es como se almacenan valores simples en el ",(0,a.jsx)(n.code,{children:"storage"}),":"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-rust",children:"#[ink(storage)]\npub struct MyContract {\n    // Store a bool\n    my_bool: bool,\n    // Store some number\n    my_number: u32,\n}\n/* --snip-- */\n"})}),"\n",(0,a.jsx)(n.h2,{id:"tipos-soportados",children:"Tipos Soportados"}),"\n",(0,a.jsxs)(n.p,{children:["Los contratos de Substrate pueden almacenar tipos que sean codificables y decodificables con ",(0,a.jsx)(n.a,{href:"https://github.com/paritytech/parity-codec",children:"Parity Codec"}),"\nque incluye la mayor\xeda de los tipos de datos comunes de Rust, como ",(0,a.jsx)(n.code,{children:"bool"}),", ",(0,a.jsx)(n.code,{children:"u{8,16,32,64,128}"}),", ",(0,a.jsx)(n.code,{children:"i{8,16,32,64,128}"}),", ",(0,a.jsx)(n.code,{children:"String"}),", tuplas, y arrays."]}),"\n",(0,a.jsxs)(n.p,{children:["Adem\xe1s, ink! proporciona tipos espec\xedficos de ",(0,a.jsx)(n.a,{href:"https://substrate.io/",children:"substrate"})," como ",(0,a.jsx)(n.code,{children:"AccountId"}),", ",(0,a.jsx)(n.code,{children:"Balance"})," y ",(0,a.jsx)(n.code,{children:"Hash"})," a los contratos inteligentes como si fueran tipos primitivos."]}),"\n",(0,a.jsx)(n.h3,{id:"string-vec-y-m\xe1s",children:"String, Vec y m\xe1s"}),"\n",(0,a.jsxs)(n.p,{children:["Como ink! opera en un entorno ",(0,a.jsx)(n.code,{children:"no_std"}),", necesitamos traer nuestras propias definiciones para los tipos de datos incluidos en std, como ",(0,a.jsx)(n.code,{children:"String"})," y ",(0,a.jsx)(n.code,{children:"Vec"}),". La caja ink_prelude ofrece tales definiciones para la mayor\xeda de los tipos de datos comunes de std y pueden ser utilizados de manera segura en un contrato ink!."]}),"\n",(0,a.jsx)(n.p,{children:"Puedes utilizar las definiciones del preludio de la siguiente manera:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-rust",children:"#[ink::contract]\nmod MyContractWithStringsAndArrays {\n    use ink::prelude::string::String;\n    use ink::prelude::vec::Vec;\n\n    #[ink(storage)]\n    pub struct MyContract {\n        // Almacena una cadena\n        my_string: String,\n        // Almacena un u32 en un vector\n        my_vector: Vec<u32>,\n    }\n    /* --snip-- */\n}\n"})}),"\n",(0,a.jsx)(n.h3,{id:"mapping",children:"Mapping"}),"\n",(0,a.jsxs)(n.p,{children:["ink! tambi\xe9n proporciona el tipo de storage ",(0,a.jsx)(n.code,{children:"Mapping"}),". Puedes leer m\xe1s sobre este tipo ",(0,a.jsx)(n.a,{href:"/datastructures/mapping",children:"aqu\xed"}),"."]}),"\n",(0,a.jsx)(n.h3,{id:"substrate-types",children:"Substrate Types"}),"\n",(0,a.jsxs)(n.p,{children:["Aqu\xed hay un ejemplo de c\xf3mo almacenar los tipos de Substrate ",(0,a.jsx)(n.code,{children:"AccountId"}),", ",(0,a.jsx)(n.code,{children:"Balance"})," y ",(0,a.jsx)(n.code,{children:"Hash"}),":"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-rust",children:"#[ink::contract]\nmod MyContract {\n\n    // Nuestra estructura utilizar\xe1 esos tipos de tinta! por defecto\n    #[ink(storage)]\n    pub struct MyContract {\n        // Almacena un AccountId\n        my_account: AccountId,\n        // Almacena un Balance\n        my_balance: Balance,\n        // Almacena un Hash\n        my_hash: Hash,\n    }\n    /* --snip-- */\n}\n"})}),"\n",(0,a.jsx)(n.h3,{id:"enum",children:"Enum"}),"\n",(0,a.jsxs)(n.p,{children:["La enumeraci\xf3n tambi\xe9n se puede utilizar como tipo de datos. Su uso se muestra en la secci\xf3n ",(0,a.jsx)(n.a,{href:"#struct",children:"Struct"}),"."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-rust",children:"pub enum Status {\n    /// Una subasta a\xfan no ha comenzado.\n    NotStarted,\n    /// Estamos en el per\xedodo de inicio de la subasta, recopilando ofertas iniciales.\n    OpeningPeriod,\n    /// Estamos en el per\xedodo final de la subasta, donde estamos tomando instant\xe1neas\n    /// de las ofertas ganadoras.\n}\n"})}),"\n",(0,a.jsx)(n.h3,{id:"struct",children:"Struct"}),"\n",(0,a.jsx)(n.p,{children:"Puede combinar todos los tipos mencionados anteriormente incluso en una estructura personalizada que luego puede almacenar en el almacenamiento de contratos."}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-rust",children:"mod MyContract {\n    use ink::prelude::string::String;\n    use ink::prelude::vec::Vec;\n\n\n    pub struct Auction {\n        /// Nombre de marca del evento de subasta.\n        name: String,\n        /// Alg\xfan hash que identifica el tema de la subasta.\n        subject: Hash,\n        /// Estado de la subasta.\n        status: Status, // Enum: Uso mostrado en la siguiente secci\xf3n\n        /// La subasta de vela no puede tener un ganador.\n        /// Si se finaliza la subasta, eso significa que se determina el ganador.\n        finalized: bool,\n        /// vector\n        vector: Vec<u8>,\n    }\n\n    #[ink(storage)]\n    pub struct MyContract {\n        // Almacena las subastas en un vec\n        auctions: Vec<Auction>,\n    }\n}\n\n"})}),"\n",(0,a.jsx)(n.h2,{id:"use-of-enum",children:"Use of enum"}),"\n",(0,a.jsxs)(n.p,{children:["Enum puede ser usado como el tipo de un valor dentro de un ",(0,a.jsx)(n.code,{children:"struct"})," como se ha mostrado antes en ",(0,a.jsx)(n.code,{children:"struct Auction"}),"."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-rust",children:"pub enum Status {\n    /// El auction a\xfan no ha comenzado.\n    NotStarted,\n    /// El auction se encuentra en la parte inicial, acumulando pujas iniciales.\n    OpeningPeriod,\n    /// Nos encontramos en la parte final del auction, tomamos snapshots\n    /// de las pujas ganadoras.\n    EndingPeriod,\n}\n"})}),"\n",(0,a.jsxs)(n.p,{children:["Los valores de un enum deben ser referenciados como ",(0,a.jsx)(n.code,{children:"Status::OpeningPeriod"}),"."]}),"\n",(0,a.jsx)(n.h2,{id:"inicializar-storage-en-constructores",children:"Inicializar Storage en Constructores"}),"\n",(0,a.jsx)(n.p,{children:"Constructores es c\xf3mo se inicializan los valores\nCada ink! smart contract debe tener un constructor que se ejecuta una vez cuando el contrato es creado. Los ink! smart contracts pueden tener m\xfaltiples constructores:"}),"\n",(0,a.jsxs)(n.p,{children:["Tenga en cuenta que si tiene un contrato cuyo almacenamiento contiene ",(0,a.jsx)(n.code,{children:"Mapping"})," tambi\xe9n puedes utilizar\n",(0,a.jsx)(n.code,{children:"ink_lang::utils::initialize_contract"})," en tu constructor. Mira la\n",(0,a.jsxs)(n.a,{href:"/datastructures/mapping",children:["documentaci\xf3n de ",(0,a.jsx)(n.code,{children:"Mapping"})]})," para m\xe1s detalles."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-rust",children:"#[ink::contract]\nmod mycontract {\n\n    #[ink(storage)]\n    pub struct MyContract {\n        number: u32,\n    }\n\n    impl MyContract {\n        /// Constructor that initializes the `u32` value to the given `init_value`.\n        #[ink(constructor)]\n        pub fn new(init_value: u32) -> Self {\n            Self {\n                number: init_value,\n            }\n        }\n\n        /// Constructor that initializes the `u32` value to the `u32` default.\n        #[ink(constructor)]\n        pub fn default() -> Self {\n            Self {\n                number: Default::default(),\n            }\n        }\n    /* --snip-- */\n    }\n}\n"})})]})}function u(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(d,{...e})}):d(e)}},28453:(e,n,s)=>{s.d(n,{R:()=>r,x:()=>i});var a=s(96540);const t={},o=a.createContext(t);function r(e){const n=a.useContext(o);return a.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:r(e.components),a.createElement(o.Provider,{value:n},e.children)}}}]);