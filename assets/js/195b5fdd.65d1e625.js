"use strict";(self.webpackChunkink_docs=self.webpackChunkink_docs||[]).push([[880],{70484:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>r,contentTitle:()=>a,default:()=>d,frontMatter:()=>s,metadata:()=>c,toc:()=>i});var o=t(17624),l=t(4552);const s={title:"2. Connect Wallet",description:"Connect to a browser wallet extension"},a="Connect Wallet",c={id:"frontend/connect-wallet",title:"2. Connect Wallet",description:"Connect to a browser wallet extension",source:"@site/docs/frontend/connect-wallet.md",sourceDirName:"frontend",slug:"/frontend/connect-wallet",permalink:"/frontend/connect-wallet",draft:!1,unlisted:!1,editUrl:"https://github.com/paritytech/ink-docs/edit/master/docs/frontend/connect-wallet.md",tags:[],version:"current",frontMatter:{title:"2. Connect Wallet",description:"Connect to a browser wallet extension"},sidebar:"reference",previous:{title:"1. Getting Started",permalink:"/frontend/getting-started"},next:{title:"All Hooks",permalink:"/frontend/hooks"}},r={},i=[{value:"useWallet()",id:"usewallet",level:2}];function u(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",p:"p",pre:"pre",...(0,l.M)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.h1,{id:"connect-wallet",children:"Connect Wallet"}),"\n",(0,o.jsxs)(n.p,{children:["A user must first grant permission in a browser wallet extension for your dApp before it can read account information or request a signature for a transaction. ",(0,o.jsx)(n.code,{children:"useWallet()"})," gives you everything you need to do this. ",(0,o.jsx)(n.code,{children:"useAllWallets()"})," returns a list of supported extensions so that you can let the user choose which wallet they would like to connect. e.g. Talisman, PolkadotJS, Subwallet, etc."]}),"\n",(0,o.jsx)(n.h2,{id:"usewallet",children:"useWallet()"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-tsx",children:"import { useWallet, useAllWallets } from 'useink';\n\nexport const ConnectWallet = ({ children }) => {\n  const { account, connect, disconnect } = useWallet()\n  const wallets = useAllWallets();\n  \n  if (!account) {\n    return (\n      <ul>\n        {wallets.map((w) => (\n          <li key={w.title}>\n            {w.installed ? (\n              <button onClick={() => connect(w.extensionName)}>\n                <img src={w.logo.src} alt={w.logo.alt} />\n                Connect to {w.title}\n              </button>\n            ) : (\n              <a href={w.installUrl}>\n                <img src={w.logo.src} alt={w.logo.alt} />\n                Install {w.title}\n              </a>\n            )}\n          </li>\n        ))}\n      </ul>\n    )\n  }\n\n  return (\n    <>\n      <p>You are connected as {account?.name || account.address}</p>\n\n      <button onClick={disconnect}>\n        Disconnect Wallet\n      </button>\n    </>\n  )\n}\n"})}),"\n",(0,o.jsxs)(n.p,{children:["After a wallet has been connected any changes made in permissions in the wallet will automatically update in the React application.\n",(0,o.jsx)(n.code,{children:"useWallet"})," has many more features including tools for switching between accounts. You can ",(0,o.jsx)(n.a,{href:"/frontend/react/hooks/wallets/use-wallet",children:"learn more about useWallet here"}),"."]})]})}function d(e={}){const{wrapper:n}={...(0,l.M)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(u,{...e})}):u(e)}},4552:(e,n,t)=>{t.d(n,{I:()=>c,M:()=>a});var o=t(11504);const l={},s=o.createContext(l);function a(e){const n=o.useContext(s);return o.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(l):e.components||l:a(e.components),o.createElement(s.Provider,{value:n},e.children)}}}]);