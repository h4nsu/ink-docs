"use strict";(self.webpackChunkink_docs=self.webpackChunkink_docs||[]).push([[4992],{92016:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>i,contentTitle:()=>r,default:()=>u,frontMatter:()=>o,metadata:()=>a,toc:()=>d});var s=n(17624),c=n(4552);const o={title:"useTxEvents",description:"React hook for collecting and caching events emitted when a transaction is `In Block`"},r="useTxEvents",a={id:"frontend/react/hooks/contracts/use-tx-events",title:"useTxEvents",description:"React hook for collecting and caching events emitted when a transaction is `In Block`",source:"@site/docs/frontend/react/hooks/contracts/use-tx-events.md",sourceDirName:"frontend/react/hooks/contracts",slug:"/frontend/react/hooks/contracts/use-tx-events",permalink:"/frontend/react/hooks/contracts/use-tx-events",draft:!1,unlisted:!1,editUrl:"https://github.com/paritytech/ink-docs/edit/master/docs/frontend/react/hooks/contracts/use-tx-events.md",tags:[],version:"current",frontMatter:{title:"useTxEvents",description:"React hook for collecting and caching events emitted when a transaction is `In Block`"},sidebar:"reference",previous:{title:"useEvents",permalink:"/frontend/react/hooks/contracts/use-events"},next:{title:"useMetadata",permalink:"/frontend/react/hooks/contracts/use-metadata"}},i={},d=[{value:"Usage",id:"usage",level:2},{value:"Return Value",id:"return-value",level:2}];function l(e){const t={a:"a",code:"code",h1:"h1",h2:"h2",p:"p",pre:"pre",...(0,c.M)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(t.h1,{id:"usetxevents",children:"useTxEvents"}),"\n",(0,s.jsxs)(t.p,{children:["React hook for collecting and caching events emitted when a transaction is ",(0,s.jsx)(t.code,{children:"In Block"}),".\nThis differs from ",(0,s.jsx)(t.a,{href:"/frontend/react/hooks/contracts/use-events",children:"useEvents"}),". ",(0,s.jsx)(t.code,{children:"useEvents"}),"\nwill subscribe to any events emitted by a contract. ",(0,s.jsx)(t.code,{children:"useTxEvents"})," accepts a transaction as\nan argument and will collect and cache the events emitted by that single transaction only.\nThis is used internally in transaction hooks, which will already provide ",(0,s.jsx)(t.code,{children:"events"})," as state."]}),"\n",(0,s.jsx)(t.h2,{id:"usage",children:"Usage"}),"\n",(0,s.jsxs)(t.p,{children:["See ",(0,s.jsx)(t.a,{href:"https://github.com/paritytech/useink/blob/0f44e1b0eee56cb2724a5b39edfc73937b8c4677/packages/useink/src/react/hooks/contracts/useDeployer/useDeployer.ts#L45",children:"useage inside of the useink library"}),"."]}),"\n",(0,s.jsx)(t.h2,{id:"return-value",children:"Return Value"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-ts",children:"{\n  resetState: () => void;\n  events: EventRecord[];\n}\n"})})]})}function u(e={}){const{wrapper:t}={...(0,c.M)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(l,{...e})}):l(e)}},4552:(e,t,n)=>{n.d(t,{I:()=>a,M:()=>r});var s=n(11504);const c={},o=s.createContext(c);function r(e){const t=s.useContext(o);return s.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function a(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(c):e.components||c:r(e.components),s.createElement(o.Provider,{value:t},e.children)}}}]);