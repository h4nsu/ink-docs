"use strict";(self.webpackChunkink_docs=self.webpackChunkink_docs||[]).push([[1592],{50684:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>s,default:()=>u,frontMatter:()=>r,metadata:()=>i,toc:()=>d});var a=n(17624),o=n(4552);const r={title:"useMetadata",description:"A React hook for loading and validating contract metadata from a file."},s="useMetadata",i={id:"frontend/react/hooks/contracts/use-metadata",title:"useMetadata",description:"A React hook for loading and validating contract metadata from a file.",source:"@site/docs/frontend/react/hooks/contracts/use-metadata.md",sourceDirName:"frontend/react/hooks/contracts",slug:"/frontend/react/hooks/contracts/use-metadata",permalink:"/frontend/react/hooks/contracts/use-metadata",draft:!1,unlisted:!1,editUrl:"https://github.com/paritytech/ink-docs/edit/master/docs/frontend/react/hooks/contracts/use-metadata.md",tags:[],version:"current",frontMatter:{title:"useMetadata",description:"A React hook for loading and validating contract metadata from a file."},sidebar:"reference",previous:{title:"useTxEvents",permalink:"/frontend/react/hooks/contracts/use-tx-events"},next:{title:"useSalter",permalink:"/frontend/react/hooks/contracts/use-salter"}},c={},d=[{value:"Usage",id:"usage",level:2},{value:"Return Value",id:"return-value",level:2}];function l(e){const t={a:"a",code:"code",h1:"h1",h2:"h2",p:"p",pre:"pre",...(0,o.M)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(t.h1,{id:"usemetadata",children:"useMetadata"}),"\n",(0,a.jsx)(t.p,{children:"A React hook for loading and validating contract metadata from a file."}),"\n",(0,a.jsx)(t.h2,{id:"usage",children:"Usage"}),"\n",(0,a.jsxs)(t.p,{children:["See ",(0,a.jsx)(t.a,{href:"https://github.com/paritytech/useink/blob/main/playground/src/components/pg-deploy/DeployPage.tsx",children:"example in the playground dApp"}),"."]}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-tsx",children:"import { useMetadata } from 'useink'\n\nexport const DeployPage: React.FC = () => {\n  // When requireWasm is set to true you must upload a full <name>.contract file containing a valid Wasm field.\n  // -- The file and Wasm blob will be validated on calling `set(file)`\n  // When requireWasm is set to false you must upload a <name>.json metadata file.\n  // -- The file will be validated on calling `set(file)`\n  const M = useMetadata({ requireWasm: true });\n\n  if (M.abi) {\n    return (\n      <>\n        <p>{M.formattedFileName}</p>\n        <button onClick={M.clear}>Reset State</button>\n      </>\n    );\n  }\n\n  return (\n    <>\n      <MyDropzoneComponent\n        onDrop={(f: File[]) => M.set(f?.[0])}\n        cta='Upload a contract file. e.g. \"flipper.contract\"'\n      />\n\n      {M.error && <p>{M.error}</p>}\n    </>\n  );\n};\n\n\n"})}),"\n",(0,a.jsx)(t.h2,{id:"return-value",children:"Return Value"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-ts",children:"{\n  abi?: Abi;\n  source?: Record<string, unknown>;\n  name: string;\n  formattedFileName: string;\n  set: (file: File) => void;\n  clear: () => void;\n  error?: MetadataError;\n}\n\n// Errors are exposed as enums for your convenience. \n// If you are using i18n you can check for one of these types and translate accordingly.\nexport enum MetadataError {\n  InvalidFile = 'Invalid file.',\n  EmptyWasm = 'Wasm field not found.',\n  InvalidWasm = 'Invalid Wasm field.',\n}\n"})})]})}function u(e={}){const{wrapper:t}={...(0,o.M)(),...e.components};return t?(0,a.jsx)(t,{...e,children:(0,a.jsx)(l,{...e})}):l(e)}},4552:(e,t,n)=>{n.d(t,{I:()=>i,M:()=>s});var a=n(11504);const o={},r=a.createContext(o);function s(e){const t=a.useContext(r);return a.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function i(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:s(e.components),a.createElement(r.Provider,{value:t},e.children)}}}]);