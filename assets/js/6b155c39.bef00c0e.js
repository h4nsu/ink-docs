"use strict";(self.webpackChunkink_docs=self.webpackChunkink_docs||[]).push([[7744],{5276:(n,e,t)=>{t.r(e),t.d(e,{assets:()=>i,contentTitle:()=>l,default:()=>d,frontMatter:()=>a,metadata:()=>s,toc:()=>r});var o=t(17624),c=t(4552);const a={title:"useWallet",description:"React Hook for connecting to a wallet extension, and accessing account information."},l="useWallet",s={id:"frontend/react/hooks/wallets/use-wallet",title:"useWallet",description:"React Hook for connecting to a wallet extension, and accessing account information.",source:"@site/docs/frontend/react/hooks/wallets/use-wallet.md",sourceDirName:"frontend/react/hooks/wallets",slug:"/frontend/react/hooks/wallets/use-wallet",permalink:"/frontend/react/hooks/wallets/use-wallet",draft:!1,unlisted:!1,editUrl:"https://github.com/paritytech/ink-docs/edit/master/docs/frontend/react/hooks/wallets/use-wallet.md",tags:[],version:"current",frontMatter:{title:"useWallet",description:"React Hook for connecting to a wallet extension, and accessing account information."},sidebar:"reference",previous:{title:"useTxPaymentInfo",permalink:"/frontend/react/hooks/contracts/use-tx-payment-info"},next:{title:"useAllWallets",permalink:"/frontend/react/hooks/wallets/use-all-wallets"}},i={},r=[{value:"Basic Usage",id:"basic-usage",level:2},{value:"Changing the Active Account",id:"changing-the-active-account",level:2},{value:"Return Type",id:"return-type",level:2}];function u(n){const e={code:"code",h1:"h1",h2:"h2",p:"p",pre:"pre",...(0,c.M)(),...n.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(e.h1,{id:"usewallet",children:"useWallet"}),"\n",(0,o.jsx)(e.p,{children:"This hook provides tools for connecting to a wallet, accessing account information, and disconnecting\nfrom a wallet. Account information will update in real time when changes are made in the wallet extension."}),"\n",(0,o.jsx)(e.h2,{id:"basic-usage",children:"Basic Usage"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-tsx",children:"import { useWallet, useAllWallets } from 'useink'\n\nexport const WalletConnect = () => {\n  const wallets = useAllWallets()\n  const { isConnected, connect, disconnect, setAccount } = useWallet()\n\n  if (isConnected) return <button onClick={disconnect}>Disconnect</button>\n\n  return (\n    <ul>\n      {wallets.map(w => (\n        <li key={w.title}>\n          {w.installed ? (\n            <button onClick={() => connect(w.extensionName)}>\n              <img src={w.logo.src} alt={w.logo.alt} />\n              Connect to {w.title}\n            </button>\n          ) : (\n            <a href={w.installUrl}>\n              <img src={w.logo.src} alt={w.logo.alt} />\n              Install {w.title}\n            </a>\n          )}\n        </li>\n      ))}\n    </ul>\n  )\n}\n"})}),"\n",(0,o.jsx)(e.h2,{id:"changing-the-active-account",children:"Changing the Active Account"}),"\n",(0,o.jsxs)(e.p,{children:["You can set the active ",(0,o.jsx)(e.code,{children:"account"})," using ",(0,o.jsx)(e.code,{children:"setAccount"}),". ",(0,o.jsx)(e.code,{children:"account"})," is used in all hooks as the caller address."]}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-tsx",children:"import { useWallet } from 'useink'\n\nexport const Accounts = () => {\n  const { account, accounts, setAccount } = useWallet()\n\n  if (!account) return null\n\n  return (\n    <div>\n      <h1>You are connected as {account.name || account.address}</h1>\n\n      <ul>\n        {accounts.map(a => (\n          <li key={a.address}>\n            <button onClick={() => setAccount(a)} disabled={account === a}>\n              Set account to {a.name || a.address}\n            </button>\n          </li>\n        ))}\n      </ul>\n    </div>\n  )\n}\n"})}),"\n",(0,o.jsx)(e.h2,{id:"return-type",children:"Return Type"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-ts",children:"{\n  account?: WalletAccount | undefined;\n  accounts: WalletAccount[] | undefined;\n  connect: (walletName: WalletName) => void;\n  disconnect: () => void;\n  walletError?: WalletError;\n  isConnected: boolean;\n  setAccount: (account: WalletAccount) => void;\n  getWallets: typeof getWallets;\n  getWalletBySource: typeof getWalletBySource;\n}\n"})})]})}function d(n={}){const{wrapper:e}={...(0,c.M)(),...n.components};return e?(0,o.jsx)(e,{...n,children:(0,o.jsx)(u,{...n})}):u(n)}},4552:(n,e,t)=>{t.d(e,{I:()=>s,M:()=>l});var o=t(11504);const c={},a=o.createContext(c);function l(n){const e=o.useContext(a);return o.useMemo((function(){return"function"==typeof n?n(e):{...e,...n}}),[e,n])}function s(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(c):n.components||c:l(n.components),o.createElement(a.Provider,{value:e},n.children)}}}]);