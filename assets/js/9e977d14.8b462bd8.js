"use strict";(self.webpackChunkink_docs=self.webpackChunkink_docs||[]).push([[3116],{64160:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>a,default:()=>u,frontMatter:()=>s,metadata:()=>c,toc:()=>i});var o=t(17624),r=t(4552);const s={title:"useCall",description:"A React hook for calling a contract message and decoding the result."},a="useCall",c={id:"frontend/react/hooks/contracts/use-call",title:"useCall",description:"A React hook for calling a contract message and decoding the result.",source:"@site/docs/frontend/react/hooks/contracts/use-call.md",sourceDirName:"frontend/react/hooks/contracts",slug:"/frontend/react/hooks/contracts/use-call",permalink:"/frontend/react/hooks/contracts/use-call",draft:!1,unlisted:!1,editUrl:"https://github.com/paritytech/ink-docs/edit/master/docs/frontend/react/hooks/contracts/use-call.md",tags:[],version:"current",frontMatter:{title:"useCall",description:"A React hook for calling a contract message and decoding the result."},sidebar:"reference",previous:{title:"All Hooks",permalink:"/frontend/hooks"},next:{title:"useCallSubscription",permalink:"/frontend/react/hooks/contracts/use-call-subscription"}},l={},i=[{value:"Usage",id:"usage",level:2},{value:"Calling with a default caller address",id:"calling-with-a-default-caller-address",level:2},{value:"Handling <code>Result&lt;T, E&gt;</code> responses from an ink! contract",id:"handling-resultt-e-responses-from-an-ink-contract",level:2},{value:"Return Value",id:"return-value",level:2}];function d(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",p:"p",pre:"pre",strong:"strong",...(0,r.M)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.h1,{id:"usecall",children:"useCall"}),"\n",(0,o.jsxs)(n.p,{children:["A hook for calling a contract message and decoding a successful response or receiving an\nerror. See ",(0,o.jsx)(n.a,{href:"/frontend/utils/pick",children:"useink/utils helpers"})," for compatible functions that work\nwell with this hook."]}),"\n",(0,o.jsx)(n.h2,{id:"usage",children:"Usage"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-tsx",children:"import { useCall } from 'useink'\nimport { pickDecoded } from 'useink/utils'\nimport metadata from 'contract/metadata.json'\n\nconst CONTRACT_ADDRESS = '...'\n\n// We define a response type so that `get.result.value.decoded` is of type SuccessfulResponse\ninterface SuccessfulResponse {\n  foo: 'bar'\n}\n\nexport const MyContractView: React.FC = () => {\n  const contract = useContract(CONTRACT_ADDRESS, metadata, 'astar');\n  const get = useCall<SuccessfulResponse>(contract, 'get');\n  const args = ['arg-1', 2];\n\n  return (\n    <>\n      <h1>Get the Result the hard way: {get.result?.ok ? get.result.value.decoded.foo : '--'}</h1>\n      <h1>Or the easy way: {pickDecoded(get.result)?.foo || '--'}</h1>\n\n      <button disabled={get.isSubmitting} onClick={() => get.send(args)}>\n        Get Result\n      </button>\n    </>\n  );\n}\n"})}),"\n",(0,o.jsx)(n.h2,{id:"calling-with-a-default-caller-address",children:"Calling with a default caller address"}),"\n",(0,o.jsxs)(n.p,{children:["You must first define a default caller in ",(0,o.jsx)(n.a,{href:"/frontend/configuration#configprops",children:"configuration"}),", then call the contract with options:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-tsx",children:"const call = useCall(contract, 'get');\nconst args = [];\n\ncall.send(args, { defaultCaller: true })\n"})}),"\n",(0,o.jsxs)(n.h2,{id:"handling-resultt-e-responses-from-an-ink-contract",children:["Handling ",(0,o.jsx)(n.code,{children:"Result<T, E>"})," responses from an ink! contract"]}),"\n",(0,o.jsxs)(n.p,{children:["One of the benefits of using ink! is ability to return meaningful errors with ",(0,o.jsx)(n.code,{children:"Result<T, E>"})," (since ink! v4.0.0). In this example we will distinguish between two kinds of errors\nand a successful result. Let's say that you have the following ink! code in your contract."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-rust",children:'    use ink::prelude::string::String;\n\n    // ...other contract code omitted\n\n    #[derive(Debug, PartialEq, Eq, scale::Encode, scale::Decode)]\n    #[cfg_attr(feature = "std", derive(scale_info::TypeInfo))]\n    pub struct Unhappy {\n        boo: String,\n    }\n\n    // A successful response\n    #[derive(Debug, PartialEq, Eq, scale::Encode, scale::Decode)]\n    #[cfg_attr(feature = "std", derive(scale_info::TypeInfo))]\n    pub struct Happy {\n        yippee: String,\n    }\n\n    #[derive(Debug, PartialEq, Eq, scale::Encode, scale::Decode)]\n    #[cfg_attr(feature = "std", derive(scale_info::TypeInfo))]\n    pub enum Error {\n        Sad(Unhappy),\n    }\n\n    impl MyMoodyContract {\n      #[ink(message)]\n      pub fn mood(&self, value: u64) -> Result<Happy, Error> {\n          if value % 2 == 0 {\n              return Ok(Happy {\n                  yippee: String::from("\ud83d\ude03"),\n              });\n          }\n\n          Err(Error::Sad(Unhappy {\n              boo: String::from("\ud83d\ude22"),\n          }))\n      }\n    }\n'})}),"\n",(0,o.jsxs)(n.p,{children:["In this example, when you call ",(0,o.jsx)(n.code,{children:"mood(2)"}),", you will get an ",(0,o.jsx)(n.code,{children:"Ok"})," response. If you call\n",(0,o.jsx)(n.code,{children:"mood(1)"})," you will get an ",(0,o.jsx)(n.code,{children:"Err"}),". If you call ",(0,o.jsx)(n.code,{children:"mood(5)"})," you will get another type of ",(0,o.jsx)(n.code,{children:"Err"}),"."]}),"\n",(0,o.jsxs)(n.p,{children:["Here is how we could handle the view using ",(0,o.jsx)(n.strong,{children:"useink"}),"."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-tsx",children:"import { useCall, useContract, useBlockNumber, decodeError } from 'useink'\nimport metadata from 'contract/metadata.json'\nconst CONTRACT_ADDRESS = '...'\n\n// We define the interface for the response.\ninterface MoodResult { \n  Ok?: { yippee: string }; \n  Err?: { \n    Sad?: { boo: string; },\n  },\n};\n\nexport const MyFickleContract: React.FC = () => {\n  const { blockNumber } = useBlockNumber();\n  const contract = useContract(CONTRACT_ADDRESS, metadata);\n  const getMood = useCall<MoodResult>(contract, 'mood');\n\n  // Fetch the mood of the contract on each new block\n  useEffect(() => {\n    if(blockNumber) getMood.send([blockNumber]);\n  }, [blockNumber])\n\n  // result is undefined before it is called the first time\n  if (!getMood.result) return <h1>Loading...</h1>\n\n  // if result.ok is false then one of two things happened.\n  // One possibility is that a pallet in the Substrate runtime threw an error.\n  // A second possibility is a contract method may have called panic! \n  // OR called assert! and it failed. In these situations no Response has been returned. \n  // We need to handle the error using decodeError.\n  if (!getMood.result.ok) {\n    return (\n      <div>\n        <p>An error occurred in runtime, not our contract function.</p>\n        <p>\n          {decodeError(getMood, {\n            ContractTrapped: 'This is a custom message. Something went wrong.', \n          })}\n        </p>\n      </div>\n    )\n  }\n\n  // We now know we have decoded value of type `MoodResult`\n  const { decoded } = getMood.result.value;\n\n  return (\n    <h1>\n      Block Number {blockNumber} makes me feel\n      {decoded.Ok && decoded.Ok.yippee}\n      {decoded.Err?.Sad && decoded.Err.Sad.boo}\n    </h1>\n  );\n}\n"})}),"\n",(0,o.jsx)(n.h2,{id:"return-value",children:"Return Value"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-ts",children:"type DecodedContractResult<T> = {\n  result?: {\n    ok: true;\n    value: {\n      decoded: T; // The response is decoded using contract Metadata and of type `T`\n      raw: ContractExecResult; // encoded raw data \n    } | {\n      ok: false;\n      // error\n      // This error occurs if any pallet throws an error, \n      // or if a contract method calls panic! or assert!() and it fails.\n      error: DispatchError | undefined; \n    }\n  }\n}\n\n// useCall returns\n{\n  isSubmitting: boolean;\n  // args: a list of arguments your contract message receives\n  // options: additional option overrides\n  // caller: the calling address. This can be used in ink! contracts with `self.env.caller()`\n  //         `caller` defaults to the connected wallet address.\n  send: (args?: unknown[], options?: ContractOptions, caller?: string) => \n    Promise<DecodedContractResult<T> | undefined>;\n  result?: DecodedContractResult<T>;\n}\n"})})]})}function u(e={}){const{wrapper:n}={...(0,r.M)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(d,{...e})}):d(e)}},4552:(e,n,t)=>{t.d(n,{I:()=>c,M:()=>a});var o=t(11504);const r={},s=o.createContext(r);function a(e){const n=o.useContext(s);return o.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:a(e.components),o.createElement(s.Provider,{value:n},e.children)}}}]);