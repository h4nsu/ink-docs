"use strict";(self.webpackChunkink_docs=self.webpackChunkink_docs||[]).push([[6732],{8496:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>i,contentTitle:()=>a,default:()=>d,frontMatter:()=>o,metadata:()=>c,toc:()=>u});var r=t(17624),s=t(4552);const o={title:"useDryRun",description:"A React hook for calling a transaction as a dry run."},a="useDryRun",c={id:"frontend/react/hooks/contracts/use-dry-run",title:"useDryRun",description:"A React hook for calling a transaction as a dry run.",source:"@site/docs/frontend/react/hooks/contracts/use-dry-run.md",sourceDirName:"frontend/react/hooks/contracts",slug:"/frontend/react/hooks/contracts/use-dry-run",permalink:"/frontend/react/hooks/contracts/use-dry-run",draft:!1,unlisted:!1,editUrl:"https://github.com/paritytech/ink-docs/edit/master/docs/frontend/react/hooks/contracts/use-dry-run.md",tags:[],version:"current",frontMatter:{title:"useDryRun",description:"A React hook for calling a transaction as a dry run."},sidebar:"reference",previous:{title:"useDeployer",permalink:"/frontend/react/hooks/contracts/use-deployer"},next:{title:"useEventSubscription",permalink:"/frontend/react/hooks/contracts/use-event-subscription"}},i={},u=[{value:"Usage",id:"usage",level:2},{value:"Calling with a default caller address",id:"calling-with-a-default-caller-address",level:2},{value:"Return Value",id:"return-value",level:2}];function l(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",p:"p",pre:"pre",...(0,s.M)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.h1,{id:"usedryrun",children:"useDryRun"}),"\n",(0,r.jsxs)(n.p,{children:["A hook for calling a transaction as a dry run - a transction without spending any gas. Dry\nruns are useful to test if a transaction will be successful and for querying the exact\nWeight amount a transaction will need to succeed. This hook is used under the hood in\n",(0,r.jsx)(n.a,{href:"/frontend/react/hooks/contracts/use-tx",children:"useTx"}),", so you should only use this if you wish to\ndisplay Dry Run information to the user before triggering a transaction."]}),"\n",(0,r.jsxs)(n.p,{children:["See ",(0,r.jsx)(n.a,{href:"/frontend/utils/pick",children:"useink/utils helpers"})," for compatible functions that work\nwell with this hook."]}),"\n",(0,r.jsx)(n.h2,{id:"usage",children:"Usage"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-tsx",children:"import { useDryRun, useContract } from 'useink'\nimport { pickTxInfo } from 'useink/utils'\n\nexport const MyContractView: React.FC = () => {\n  const contract = useContract('...address', metadata, 'zeitgeist')\n  \n  const get = useDryRun<boolean>(contract, 'get')\n\n  return (\n    <>\n      <button onClick={() => get.send()}>\n        {get.isSubmitting ? 'Send Dry Run' : 'Sending...'}\n      </div>\n\n      <h2>Get the fee the hard way: {get.result.ok ? get.result.value.partialFee : '--'}</h2>\n      <h2>Or the easy way: {pickTxInfo(get.result)?.partialFee || '--'}</h2>\n    </>\n  )\n}\n"})}),"\n",(0,r.jsx)(n.h2,{id:"calling-with-a-default-caller-address",children:"Calling with a default caller address"}),"\n",(0,r.jsxs)(n.p,{children:["You must first define a default caller in ",(0,r.jsx)(n.a,{href:"/frontend/configuration#configprops",children:"configuration"}),", then call the contract with options:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-tsx",children:"const dryRun = useDryRun(cRococoContract, 'flip');\nconst args = [];\n\ndryRun.send(args, { defaultCaller: true });\n"})}),"\n",(0,r.jsx)(n.h2,{id:"return-value",children:"Return Value"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"interface DryRun<T> {\n  send: Send<T>;\n  isSubmitting: boolean;\n  result?: DryRunResult<T>;\n  resolved: Boolean;\n  resetState: () => void; // A convenience function to reset result state\n}\n"})})]})}function d(e={}){const{wrapper:n}={...(0,s.M)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(l,{...e})}):l(e)}},4552:(e,n,t)=>{t.d(n,{I:()=>c,M:()=>a});var r=t(11504);const s={},o=r.createContext(s);function a(e){const n=r.useContext(o);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:a(e.components),r.createElement(o.Provider,{value:n},e.children)}}}]);