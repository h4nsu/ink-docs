"use strict";(self.webpackChunkink_docs=self.webpackChunkink_docs||[]).push([[1953],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>m});var a=n(67294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var s=a.createContext({}),c=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},p=function(e){var t=c(e.components);return a.createElement(s.Provider,{value:t},e.children)},d="mdxType",h={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,r=e.originalType,s=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),d=c(n),u=i,m=d["".concat(s,".").concat(u)]||d[u]||h[u]||r;return n?a.createElement(m,o(o({ref:t},p),{},{components:n})):a.createElement(m,o({ref:t},p))}));function m(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var r=n.length,o=new Array(r);o[0]=u;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[d]="string"==typeof e?e:i,o[1]=l;for(var c=2;c<r;c++)o[c]=n[c];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},51631:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>h,frontMatter:()=>r,metadata:()=>l,toc:()=>c});var a=n(87462),i=(n(67294),n(3905));const r={title:"Migrating from ink! 4.x to 5.0",slug:"/faq/migrating-from-ink-4-to-5"},o=void 0,l={unversionedId:"faq/migrating-from-ink-4-to-5",id:"version-5.x/faq/migrating-from-ink-4-to-5",title:"Migrating from ink! 4.x to 5.0",description:"We've made a couple of breaking changes from ink! 4.x to ink! 5.0.",source:"@site/versioned_docs/version-5.x/faq/migrating-from-ink-4-to-5.md",sourceDirName:"faq",slug:"/faq/migrating-from-ink-4-to-5",permalink:"/5.x/faq/migrating-from-ink-4-to-5",draft:!1,editUrl:"https://github.com/paritytech/ink-docs/edit/master/versioned_docs/version-5.x/faq/migrating-from-ink-4-to-5.md",tags:[],version:"5.x",frontMatter:{title:"Migrating from ink! 4.x to 5.0",slug:"/faq/migrating-from-ink-4-to-5"},sidebar:"reference",previous:{title:"Frequently Asked Questions",permalink:"/5.x/faq"},next:{title:"Migrating from ink! 3.x to 4.0",permalink:"/5.x/faq/migrating-from-ink-3-to-4"}},s={},c=[{value:"How to upgrade",id:"how-to-upgrade",level:2},{value:"Compatibility",id:"compatibility",level:2},{value:"<code>cargo-contract</code> 4.0",id:"cargo-contract-40",level:3},{value:"Substrate",id:"substrate",level:3},{value:"How do I find out which Polkadot version a chain is running on?",id:"how-do-i-find-out-which-polkadot-version-a-chain-is-running-on",level:4},{value:"Tooling",id:"tooling",level:3},{value:"Dependencies",id:"dependencies",level:3},{value:"Frontend Libraries",id:"frontend-libraries",level:3},{value:"Important Changes",id:"important-changes",level:2},{value:"<code>scale</code> dependencies were moved to <code>ink</code> entrance crate",id:"scale-dependencies-were-moved-to-ink-entrance-crate",level:3},{value:"Wildcard selectors: only one other message is allowed in the contract besides the wildcard selector",id:"wildcard-selectors-only-one-other-message-is-allowed-in-the-contract-besides-the-wildcard-selector",level:3},{value:"Events 2.0",id:"events-20",level:3},{value:"Custom signature topics",id:"custom-signature-topics",level:4},{value:"No more unchecked arithmetic",id:"no-more-unchecked-arithmetic",level:3},{value:"Fail when decoding from storage and not all bytes consumed",id:"fail-when-decoding-from-storage-and-not-all-bytes-consumed",level:3},{value:"ink_e2e API Changes",id:"ink_e2e-api-changes",level:3},{value:"Builder API",id:"builder-api",level:4},{value:"Extra gas margin",id:"extra-gas-margin",level:4},{value:"Improved <code>call()</code> API",id:"improved-call-api",level:4},{value:"New Data Structure: <code>StorageVec</code>",id:"new-data-structure-storagevec",level:3},{value:"Fallible methods for <code>Lazy</code>, <code>Mapping</code>, <code>StorageVec</code>",id:"fallible-methods-for-lazy-mapping-storagevec",level:3},{value:"Chain Extension API changed + Support for multiple chain extensions",id:"chain-extension-api-changed--support-for-multiple-chain-extensions",level:3},{value:"Interesting New Features",id:"interesting-new-features",level:2},{value:"End-To-End testing with a chain snapshot",id:"end-to-end-testing-with-a-chain-snapshot",level:3},{value:"New lints",id:"new-lints",level:3},{value:"New <code>cargo-contract</code> commands",id:"new-cargo-contract-commands",level:3},{value:"Alternative off-chain E2E testing backend support: DRink!",id:"alternative-off-chain-e2e-testing-backend-support-drink",level:3},{value:"Contract Verification",id:"contract-verification",level:3},{value:"We improved the contract example illustrating upgradeable contracts via <code>delegate_call</code>",id:"we-improved-the-contract-example-illustrating-upgradeable-contracts-via-delegate_call",level:3},{value:"We made <code>set_code_hash</code> generic",id:"we-made-set_code_hash-generic",level:3},{value:"Buffer size can be customized",id:"buffer-size-can-be-customized",level:3},{value:"Stabilized <code>call_runtime</code>",id:"stabilized-call_runtime",level:3}],p={toc:c},d="wrapper";function h(e){let{components:t,...n}=e;return(0,i.kt)(d,(0,a.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("img",{src:"/img/title/migration-4.x-to-5.0.svg",className:"titlePic"}),(0,i.kt)("p",null,"We've made a couple of breaking changes from ink! 4.x to ink! 5.0.\nOn this page we outline how you can migrate existing clients and\ncontracts from 4.x to 5.0."),(0,i.kt)("p",null,"This release addresses the majority of issues raised in ",(0,i.kt)("a",{parentName:"p",href:"https://blog.openzeppelin.com/security-review-ink-cargo-contract"},"the OpenZeppelin\nsecurity review"),".\nIn particular, we addressed the proxy selector clashing attack."),(0,i.kt)("p",null,"You can find the full changelog of the 5.0 release ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/paritytech/ink/blob/master/CHANGELOG.md"},"here"),"."),(0,i.kt)("admonition",{type:"caution"},(0,i.kt)("p",{parentName:"admonition"},"This migration guide only considers your code base! Not your storage data!"),(0,i.kt)("p",{parentName:"admonition"},"If you have an existing contract on-chain you might not be able to just\nupgrade the code on-chain, you possibly also have to migrate your storage data."),(0,i.kt)("p",{parentName:"admonition"},"The relevant change that you have to take into consideration is\n",(0,i.kt)("a",{parentName:"p",href:"https://github.com/paritytech/ink/pull/1897"},"#1897"),".\nA data migration may be required when your contract reads data from storage and truncates\nthe data when decoding it.\nWe've described this in more detail below, in the section\n",(0,i.kt)("a",{parentName:"p",href:"#fail-when-decoding-from-storage-and-not-all-bytes-consumed"},'"Fail when decoding from storage and not all bytes consumed"'),".")),(0,i.kt)("h2",{id:"how-to-upgrade"},"How to upgrade"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Change the dependency versions of ",(0,i.kt)("inlineCode",{parentName:"li"},"ink")," and ",(0,i.kt)("inlineCode",{parentName:"li"},"ink_e2e")," in your contracts ",(0,i.kt)("inlineCode",{parentName:"li"},"Cargo.toml")," to ",(0,i.kt)("inlineCode",{parentName:"li"},"5"),"."),(0,i.kt)("li",{parentName:"ul"},"Update your local ",(0,i.kt)("inlineCode",{parentName:"li"},"cargo-contract")," installation to 4.0."),(0,i.kt)("li",{parentName:"ul"},"Read through this page.")),(0,i.kt)("h2",{id:"compatibility"},"Compatibility"),(0,i.kt)("p",null,"The following chains are in production and support ink! 5.0:"),(0,i.kt)("div",{className:"row"},(0,i.kt)("div",{className:"col text--center"},(0,i.kt)("a",{href:"https://alephzero.org"},(0,i.kt)("img",{src:"/img/chains/aleph-zero.svg",className:"chain"}))),(0,i.kt)("div",{className:"col text--center"},(0,i.kt)("a",{href:"https://astar.network"},(0,i.kt)("img",{src:"/img/chains/astar.svg",className:"chain"}))),(0,i.kt)("div",{className:"col text--center"},(0,i.kt)("a",{href:"https://shiden.astar.network"},(0,i.kt)("img",{src:"/img/chains/shiden.svg",className:"chain"})))),(0,i.kt)("div",{className:"row"},(0,i.kt)("div",{className:"col text--center"},(0,i.kt)("a",{href:"http://phala.network"},(0,i.kt)("img",{src:"/img/chains/phala.svg",className:"chain"}))),(0,i.kt)("div",{className:"col text--center"},(0,i.kt)("a",{href:"https://pendulumchain.org"},(0,i.kt)("img",{src:"/img/chains/pendulum.svg",className:"chain"}))),(0,i.kt)("div",{className:"col text--center"},(0,i.kt)("a",{href:"https://pendulumchain.org/amplitude"},(0,i.kt)("img",{src:"/img/chains/amplitude.svg",className:"chain"})))),(0,i.kt)("div",{className:"row"},(0,i.kt)("div",{className:"col text--center"},(0,i.kt)("a",{href:"https://krest.peaq.network/"},(0,i.kt)("img",{src:"/img/chains/krest.svg",className:"chain"})))),(0,i.kt)("h3",{id:"cargo-contract-40"},(0,i.kt)("inlineCode",{parentName:"h3"},"cargo-contract")," 4.0"),(0,i.kt)("p",null,"Together with ink! 5.0 we've released ",(0,i.kt)("inlineCode",{parentName:"p"},"cargo-contract")," 4.0."),(0,i.kt)("admonition",{type:"info"},(0,i.kt)("p",{parentName:"admonition"},"You have to use ",(0,i.kt)("inlineCode",{parentName:"p"},"cargo-contract")," >= 4.0 for ink! 5.0 contracts!"),(0,i.kt)("p",{parentName:"admonition"},"You can upgrade via:"),(0,i.kt)("pre",{parentName:"admonition"},(0,i.kt)("code",{parentName:"pre",className:"language-rust"},"cargo install cargo-contract --version ^4\n"))),(0,i.kt)("p",null,"Make sure that e.g. your CI also uses at least ",(0,i.kt)("inlineCode",{parentName:"p"},"cargo-contract")," 4.0 with ink! v5.0.\nIf you have wrapper scripts around ",(0,i.kt)("inlineCode",{parentName:"p"},"cargo-contract"),", you should\nensure that this version is enforced, otherwise users will get an error."),(0,i.kt)("h3",{id:"substrate"},"Substrate"),(0,i.kt)("p",null,"The same requirements as for ink! 4.0 hold."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"pallet-contracts")," >= ",(0,i.kt)("inlineCode",{parentName:"li"},"polkadot-v0.9.37"),"."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"substrate-contracts-node")," >= ",(0,i.kt)("inlineCode",{parentName:"li"},"v0.24.0"))),(0,i.kt)("h4",{id:"how-do-i-find-out-which-polkadot-version-a-chain-is-running-on"},"How do I find out which Polkadot version a chain is running on?"),(0,i.kt)("p",null,"You can query the ",(0,i.kt)("inlineCode",{parentName:"p"},"contracts::palletVersion()")," via the chain state RPCs. It has to\nbe ",(0,i.kt)("inlineCode",{parentName:"p"},">= 9")," for ink! 5.0 to be compatible."),(0,i.kt)("p",null,"You can use e.g. the ",(0,i.kt)("a",{parentName:"p",href:"https://polkadot.js.org/apps/"},"polakdot.js app")," to do this:\nDeveloper \xbb Chain State \xbb ",(0,i.kt)("inlineCode",{parentName:"p"},"contracts")," \xbb ",(0,i.kt)("inlineCode",{parentName:"p"},"palletVersion()")," \xbb Click on the ",(0,i.kt)("inlineCode",{parentName:"p"},"+")," on the right."),(0,i.kt)("center",null,(0,i.kt)("img",{src:"/img/pallet-version.png"})),(0,i.kt)("h3",{id:"tooling"},"Tooling"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"cargo-contract")," >= v4.0"),(0,i.kt)("li",{parentName:"ul"},"Stable Rust >= 1.75")),(0,i.kt)("h3",{id:"dependencies"},"Dependencies"),(0,i.kt)("p",null,"Same as for ink! 4.0."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"scale")," >= 3"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"scale-info")," >= 2.6")),(0,i.kt)("h3",{id:"frontend-libraries"},"Frontend Libraries"),(0,i.kt)("p",null,"Same as for ink! 4.0: ",(0,i.kt)("inlineCode",{parentName:"p"},"polkadot-js/api")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"polkadot-js/api-contract")," >= 9.10.2."),(0,i.kt)("h2",{id:"important-changes"},"Important Changes"),(0,i.kt)("h3",{id:"scale-dependencies-were-moved-to-ink-entrance-crate"},(0,i.kt)("inlineCode",{parentName:"h3"},"scale")," dependencies were moved to ",(0,i.kt)("inlineCode",{parentName:"h3"},"ink")," entrance crate"),(0,i.kt)("p",null,"This change was done to ensure that you always use the correct scale dependency versions\nwith an ink! version. The relevant PR is ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/paritytech/ink/pull/1890"},"#1890"),"."),(0,i.kt)("p",null,"We removed the requirement for contracts to have direct dependencies on ",(0,i.kt)("inlineCode",{parentName:"p"},"parity-scale-codec"),"\nand ",(0,i.kt)("inlineCode",{parentName:"p"},"scale-info")," in their ",(0,i.kt)("inlineCode",{parentName:"p"},"Cargo.toml"),".\nYou can now remove those dependencies from your contracts ",(0,i.kt)("inlineCode",{parentName:"p"},"Cargo.toml"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-diff"},'ink = { version = "4.3", default-features = false }\n-scale = { package = "parity-scale-codec", version = "3", default-features = false, features = ["derive"] }\n-scale-info = { version = "2.6", default-features = false, features = ["derive"], optional = true }\n')),(0,i.kt)("p",null,"Both crates have been re-exported from the ",(0,i.kt)("inlineCode",{parentName:"p"},"ink")," umbrella crate: ",(0,i.kt)("inlineCode",{parentName:"p"},"ink::scale_info")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"ink::scale"),"."),(0,i.kt)("p",null,"We created a convenience macro to derive the re-exported traits ",(0,i.kt)("inlineCode",{parentName:"p"},"ink::scale::Encode"),",\n",(0,i.kt)("inlineCode",{parentName:"p"},"ink::scale::Decode")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"ink::scale_info::TypeInfo"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-rust"},'// Previously\n#[scale::Encode, scale::Decode)]\n#[cfg_attr(feature = "std", derive(::scale_info::TypeInfo))]\npub enum Error {}\n\n\n// Now\n#[ink::scale_derive(Encode, Decode, TypeInfo)]\npub enum Error {}\n')),(0,i.kt)("p",null,"The documentation of the macro can be found ",(0,i.kt)("a",{parentName:"p",href:"https://docs.rs/ink/5.0.0-rc/ink/attr.scale_derive.html"},"here"),"."),(0,i.kt)("h3",{id:"wildcard-selectors-only-one-other-message-is-allowed-in-the-contract-besides-the-wildcard-selector"},"Wildcard selectors: only one other message is allowed in the contract besides the wildcard selector"),(0,i.kt)("p",null,"Following ",(0,i.kt)("a",{parentName:"p",href:"https://blog.openzeppelin.com/security-review-ink-cargo-contract"},"our security review by OpenZeppelin"),",\nwe've tightened the usage of wildcard selectors.\nWith ink! 5.0 we allow only exactly one other contract message with a well-known reserved\nselector to be defined. In ink! 4.x, more than one other message was allowed."),(0,i.kt)("p",null,"Read more in ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/paritytech/ink/pull/1708"},"the PR")," and ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/paritytech/ink/issues/1676"},"IIP-2: Limit contracts with a wildcard selector to one other message"),"."),(0,i.kt)("p",null,"The proposal is to restrict contracts with a wildcard selector to only have one other message\nwith a reserved/well-known selector. This guarantees that there are no selector clashes,\neither by chance or malicious intent, and that the Proxy will only handle messages intended for it."),(0,i.kt)("p",null,"If a contract uses a wildcard selector ",(0,i.kt)("inlineCode",{parentName:"p"},"#[ink(message, payable, selector = _)]")," it ",(0,i.kt)("em",{parentName:"p"},"MAY")," define one\nother message. This message ",(0,i.kt)("em",{parentName:"p"},"MUST")," use the reserved selector ",(0,i.kt)("inlineCode",{parentName:"p"},"@"),".\nThis selector ",(0,i.kt)("em",{parentName:"p"},"MUST")," only be used in conjunction with a wildcard selector."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-rust"},'/// Handles any message with no matching selector in this proxy contract\n#[ink(message, selector = _)]\npub fn fallback(&self) {\n    // forward call to the "logic" contract which actually executes the call\n}\n\n#[ink::scale_derive(Decode)]\npub enum ProxyMessage {\n    UpgradeContract(Hash),\n}\n\n/// One other message allowed to handle messages.\n/// Fails to compile unless `@` is used as the selector.\n#[ink(message, selector = @)]\npub fn handler(&self, msg: ProxyMessage) {\n  match msg {\n    ProxyMessage(hash) => { }\n  }\n}\n\n/// An additional message. Fails to compile when uncommented.\n// #[ink(message)]\n// pub fn additional_message(&self, msg: ProxyMessage) {\n//    match msg {\n//        ProxyMessage(hash) => ...\n//    }\n// }\n')),(0,i.kt)("h3",{id:"events-20"},"Events 2.0"),(0,i.kt)("p",null,"In prior ink! versions, events were defined inside the ",(0,i.kt)("inlineCode",{parentName:"p"},"#[ink::contract]")," macro.\nWith ink! 5.0 we decouple events from the ",(0,i.kt)("inlineCode",{parentName:"p"},"#[ink::contract]")," macro,\nallowing events to be shared between contracts.\nWe've updated ",(0,i.kt)("a",{parentName:"p",href:"/5.x/basics/events"},"the Events documentation page")," accordingly."),(0,i.kt)("p",null,"The syntax of defining events within the main ",(0,i.kt)("inlineCode",{parentName:"p"},"#[ink::contract]")," macro will continue to work,\nno code changes in existing contracts are required to update to the new syntax."),(0,i.kt)("admonition",{type:"caution"},(0,i.kt)("p",{parentName:"admonition"},"The topic calculation changed in general, so also for events that are declared inside the\n",(0,i.kt)("inlineCode",{parentName:"p"},"#[ink::contract]")," macro!"),(0,i.kt)("p",{parentName:"admonition"},"This is a breaking change for any client code which uses topics to filter events."),(0,i.kt)("p",{parentName:"admonition"},"Please see ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/paritytech/ink/pull/1827"},"#1827")," for details.")),(0,i.kt)("h4",{id:"custom-signature-topics"},"Custom signature topics"),(0,i.kt)("p",null,"In ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/paritytech/ink/pull/2031"},"#2031")," we introduced an\noptional attribute ",(0,i.kt)("inlineCode",{parentName:"p"},"signature_topic")," to the ",(0,i.kt)("inlineCode",{parentName:"p"},"#[ink::event]")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"#[ink(event)]")," macros.\nIt can be used to specify the signature topic for a specific event manually, instead of the\nautomatic topic calculation."),(0,i.kt)("h3",{id:"no-more-unchecked-arithmetic"},"No more unchecked arithmetic"),(0,i.kt)("p",null,"Unchecked arithmetic operations in a contract are no longer supported for arithmetic\nsafety reasons. Compiling a contract that contains those will fail gracefully."),(0,i.kt)("p",null,'If you haven\'t already done, you now need to handle overflows that could occur.\nRust supports different possibilities of doing so (saturating, "wrap around",\nand unchecked arithmetic operations) .\nSee ',(0,i.kt)("a",{parentName:"p",href:"https://doc.rust-lang.org/book/ch03-02-data-types.html#scalar-types"},"this")," section\nof the Rust Programming Language for a thorough explanation on how to do safe arithmetic\noperations in Rust."),(0,i.kt)("p",null,"This change was introduced in ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/paritytech/ink/pull/1831"},"#1831"),"."),(0,i.kt)("h3",{id:"fail-when-decoding-from-storage-and-not-all-bytes-consumed"},"Fail when decoding from storage and not all bytes consumed"),(0,i.kt)("p",null,"If a contract previously relied on successful decoding which does not consume all bytes,\nthen recompiling with a version of ink! which includes this change will cause that contract\nto trap at runtime when attempting to decode."),(0,i.kt)("p",null,"A simple example would be if a storage cell contains some bytes which were in the first place\nan encoded ",(0,i.kt)("inlineCode",{parentName:"p"},"u32"),". If the contract attempts to decode those into a ",(0,i.kt)("inlineCode",{parentName:"p"},"u8"),"\nthis would previously have succeeded, now the contract would trap."),(0,i.kt)("p",null,"Here's a code example of behavior that previously worked for ink! 4.x, but\nwould error now:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-rust"},'let key = 0u32;\nlet value = [0x42; 32];\nink::env::set_contract_storage(&key, &value);\n\n// Only attempt to read the first byte (the `u8`) of the storage value data\nlet _loaded_value: Option<u8> = ink::env::get_contract_storage(&key)\n    .map_err(|e| format!("get_contract_storage failed: {:?}", e))?;\n')),(0,i.kt)("p",null,"We introduced this change in ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/paritytech/ink/pull/1897"},"#1897"),"."),(0,i.kt)("h3",{id:"ink_e2e-api-changes"},"[ink_e2e]"," API Changes"),(0,i.kt)("h4",{id:"builder-api"},"Builder API"),(0,i.kt)("p",null,"In ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/paritytech/ink/pull/1917"},"#1917")," we reworked the E2E API with\na builder API.\n",(0,i.kt)("inlineCode",{parentName:"p"},"instantiate"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"call")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"upload")," will now return a builder instance. You can\nspecify optional arguments with builder methods, and submit the call for on-chain\nexecution with the ",(0,i.kt)("inlineCode",{parentName:"p"},".submit()")," method, or dry-run it with ",(0,i.kt)("inlineCode",{parentName:"p"},"dry_run()"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-rust"},'let contract = client\n    .instantiate("flipper", &ink_e2e::alice(), &mut constructor)\n    .submit()\n    .await\n    .expect("instantiate failed");\nlet mut call = contract.call::<Flipper>();\n\nlet get = call.get();\nlet get_res = client.call(&ink_e2e::bob(), &get).dry_run().await;\nassert!(matches!(get_res.return_value(), false));\n')),(0,i.kt)("h4",{id:"extra-gas-margin"},"Extra gas margin"),(0,i.kt)("p",null,"As part of ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/paritytech/ink/pull/1917"},"#1917")," we added the possibility\nto specify a gas margin (in percentage) as part of the on-chain call."),(0,i.kt)("p",null,"There are cases when gas estimates may not necessarily be accurate enough due to the complexity\nof the smart contract logic that adds additional overhead and gas consumption.\nTherefore, it is helpful to allow to specify an extra portion of the gas to be added to the\nlimit (i.e. 5%, 10%)."),(0,i.kt)("p",null,"The method ",(0,i.kt)("inlineCode",{parentName:"p"},".extra_gas_portion(margin: u64)")," method is part of the builder API:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://docs.rs/ink_e2e/5.0.0-rc/ink_e2e/struct.InstantiateBuilder.html#method.extra_gas_portion"},(0,i.kt)("inlineCode",{parentName:"a"},"ink_e2e::InstantiateBuilder::extra_gas_portion"))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://docs.rs/ink_e2e/5.0.0-rc/ink_e2e/struct.CallBuilder.html#method.extra_gas_portion"},(0,i.kt)("inlineCode",{parentName:"a"},"ink_e2e::CallBuilder::extra_gas_portion")))),(0,i.kt)("h4",{id:"improved-call-api"},"Improved ",(0,i.kt)("inlineCode",{parentName:"h4"},"call()")," API"),(0,i.kt)("p",null,"We removed the ",(0,i.kt)("inlineCode",{parentName:"p"},"build_message()")," function with its unhandy callback."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-rust"},"// Previously\nlet first_insert = ink_e2e::build_message::<MappingsRef>(contract_id)\n    .call(|contract| contract.insert_balance(1_000));\n\n// Now\nlet first_insert = ink_e2e::build_message::<MappingsRef>(contract_id)\n    .call().insert_balance(1_000));\n")),(0,i.kt)("p",null,"See ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/paritytech/ink/pull/1782"},"#1782")," for more details."),(0,i.kt)("h3",{id:"new-data-structure-storagevec"},"New Data Structure: ",(0,i.kt)("inlineCode",{parentName:"h3"},"StorageVec")),(0,i.kt)("p",null,"We've added a ",(0,i.kt)("inlineCode",{parentName:"p"},"Vec"),"-like data structure, built on top of Mapping."),(0,i.kt)("p",null,"This allows to retrieve elements from a vector and grow it without\nhaving to load and push all elements.\nFor ",(0,i.kt)("inlineCode",{parentName:"p"},"Vec"),", the cost of reading or writing a single element grows linearly corresponding\nto the number of elements in the vector (its length). Additionally, the maximum capacity\nof the whole vector is limited by the size of ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/paritytech/ink/blob/master/ARCHITECTURE.md#communication-with-the-pallet"},"ink!'s static buffer"),"\nused during ABI encoding and decoding (default 16 KiB).\n",(0,i.kt)("inlineCode",{parentName:"p"},"StorageVec")," on the other hand allows to access each element individually."),(0,i.kt)("p",null,"With a ",(0,i.kt)("inlineCode",{parentName:"p"},"Vec")," it's possible to e.g. introduce a security issue in your contract\nwhere an attacker can fill the ",(0,i.kt)("inlineCode",{parentName:"p"},"Vec"),", making it very costly for other users to\naccess it or write to it."),(0,i.kt)("p",null,"You can find verbatim documentation on ",(0,i.kt)("inlineCode",{parentName:"p"},"StorageVec")," ",(0,i.kt)("a",{parentName:"p",href:"/5.x/datastructures/storagevec"},"here"),".\nThe page explains when to use ",(0,i.kt)("inlineCode",{parentName:"p"},"StorageVec")," and when not.\nThe Rust docs can be found ",(0,i.kt)("a",{parentName:"p",href:"https://docs.rs/ink/5.0.0-rc/ink/storage/struct.StorageVec.html"},"here"),"."),(0,i.kt)("h3",{id:"fallible-methods-for-lazy-mapping-storagevec"},"Fallible methods for ",(0,i.kt)("inlineCode",{parentName:"h3"},"Lazy"),", ",(0,i.kt)("inlineCode",{parentName:"h3"},"Mapping"),", ",(0,i.kt)("inlineCode",{parentName:"h3"},"StorageVec")),(0,i.kt)("p",null,"In ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/paritytech/ink/pull/1910"},"#1910")," we added ",(0,i.kt)("inlineCode",{parentName:"p"},"try_*")," methods for\nreading and writing ",(0,i.kt)("inlineCode",{parentName:"p"},"Lazy")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"Mapping")," values to and from storage.\nThe try methods correspond to ",(0,i.kt)("inlineCode",{parentName:"p"},"Mapping::{insert, get, take}"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"Lazy::{set, get}"),".\nFor ",(0,i.kt)("inlineCode",{parentName:"p"},"StorageVec::{peek, get, set, pop, push}")," we added ",(0,i.kt)("inlineCode",{parentName:"p"},"try_*")," methods in\n",(0,i.kt)("a",{parentName:"p",href:"https://github.com/paritytech/ink/pull/1995"},"#1995"),"."),(0,i.kt)("p",null,"Please see the individual Rust docs for these new methods:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://docs.rs/ink/5.0.0-rc/ink/storage/struct.StorageVec.html"},(0,i.kt)("inlineCode",{parentName:"a"},"StorageVec"))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://docs.rs/ink/5.0.0-rc/ink/storage/struct.Lazy.html"},(0,i.kt)("inlineCode",{parentName:"a"},"Lazy"))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://docs.rs/ink/5.0.0-rc/ink/storage/struct.Mapping.html"},(0,i.kt)("inlineCode",{parentName:"a"},"Mapping")),". For ",(0,i.kt)("inlineCode",{parentName:"li"},"Mapping"),", the encoded size of the key is also accounted for.")),(0,i.kt)("p",null,"You should use the ",(0,i.kt)("inlineCode",{parentName:"p"},"try_*")," methods for dynamically sized values, unless you made sure\notherwise they will fit into the static buffer. The ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/paritytech/ink/blob/master/ARCHITECTURE.md#communication-with-the-pallet"},"static buffer in ink!"),"\nis 16 kB by default."),(0,i.kt)("p",null,"We added a lint to ",(0,i.kt)("inlineCode",{parentName:"p"},"cargo-contract")," 4.0 that will detect\npotentially unsafe uses of methods for which there are safer alternatives:\n",(0,i.kt)("a",{parentName:"p",href:"https://use.ink/5.x/linter/rules/non_fallible_api"},(0,i.kt)("inlineCode",{parentName:"a"},"non_fallible_api")),"."),(0,i.kt)("h3",{id:"chain-extension-api-changed--support-for-multiple-chain-extensions"},"Chain Extension API changed + Support for multiple chain extensions"),(0,i.kt)("p",null,"With ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/paritytech/ink/pull/1958"},"#1958")," we added support for interacting with\nmultiple chain extensions from ink!. This is a breaking change."),(0,i.kt)("p",null,"You can now e.g. have a contract that utilizes a PSP22 chain extension together with one\nfor random numbers."),(0,i.kt)("p",null,"The syntax for chain extensions changed slightly:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-diff"},"-#[ink(extension = 0xfecb)]\n+#[ink(function = 0xfecb)]\nfn foo() {}\n")),(0,i.kt)("p",null,"The argument type changed from ",(0,i.kt)("inlineCode",{parentName:"p"},"u32")," to ",(0,i.kt)("inlineCode",{parentName:"p"},"u16"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-diff"},"-/// `#[ink(extension = N: u32)]`\n-Extension,\n+/// `#[ink(function = N: u16)]`\n+Function,\n")),(0,i.kt)("p",null,"A migration in most cases should just be to rename ",(0,i.kt)("inlineCode",{parentName:"p"},"#[ink(extension = \u2026)]")," to\n",(0,i.kt)("inlineCode",{parentName:"p"},"#[ink(function = \u2026)]"),"."),(0,i.kt)("p",null,"We added an example contract that illustrates the usage of multiple chain extensions\nin one contract:\n",(0,i.kt)("a",{parentName:"p",href:"https://github.com/paritytech/ink/tree/master/integration-tests/combined-extension"},(0,i.kt)("inlineCode",{parentName:"a"},"combined-extension")),"."),(0,i.kt)("h2",{id:"interesting-new-features"},"Interesting New Features"),(0,i.kt)("h3",{id:"end-to-end-testing-with-a-chain-snapshot"},"End-To-End testing with a chain snapshot"),(0,i.kt)("p",null,"With ink! 5.0 we introduce the possibility of running your tests against the\nfork (i.e. snapshot) of a live chain."),(0,i.kt)("p",null,"See ",(0,i.kt)("a",{parentName:"p",href:"/5.x/basics/contract-testing/chain-snapshot"},"this page")," in our documentation for details."),(0,i.kt)("h3",{id:"new-lints"},"New lints"),(0,i.kt)("p",null,"The new lints are:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"/5.x/linter/rules/no_main"},(0,i.kt)("inlineCode",{parentName:"a"},"no_main")),": enforces ",(0,i.kt)("inlineCode",{parentName:"li"},"no_main")," for  contracts."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"/5.x/linter/rules/primitive_topic"},(0,i.kt)("inlineCode",{parentName:"a"},"primitive_topic")),": no number types are allowed as event topics."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"/5.x/linter/rules/storage_never_freed"},(0,i.kt)("inlineCode",{parentName:"a"},"storage_never_freed")),": what is written into storage can be removed again."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"/5.x/linter/rules/strict_balance_equality"},(0,i.kt)("inlineCode",{parentName:"a"},"strict_balance_equality")),": detects usage of strict balance equality checks, a common smart contract vulnerability."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"/5.x/linter/rules/non_fallible_api"},(0,i.kt)("inlineCode",{parentName:"a"},"non_fallible_api")),": detects the usage of potentially unsafe methods for which there are safer alternatives.")),(0,i.kt)("p",null,"With ",(0,i.kt)("inlineCode",{parentName:"p"},"cargo-contract")," 4.0 we added a couple new lints for common smart contract issues\nand best practices.\nYou can run the linter via ",(0,i.kt)("inlineCode",{parentName:"p"},"cargo contract build --lint"),"."),(0,i.kt)("p",null,"Details on each lint can be found ",(0,i.kt)("a",{parentName:"p",href:"/5.x/linter/overview"},"here"),"."),(0,i.kt)("h3",{id:"new-cargo-contract-commands"},"New ",(0,i.kt)("inlineCode",{parentName:"h3"},"cargo-contract")," commands"),(0,i.kt)("p",null,"We added a bunch of helpful new commands to ",(0,i.kt)("inlineCode",{parentName:"p"},"cargo-contract")," 4.0.\nFor all these commands you can also supply the ",(0,i.kt)("inlineCode",{parentName:"p"},"--help")," cli flag to get more\ninfo (e.g. ",(0,i.kt)("inlineCode",{parentName:"p"},"cargo contract storage --help"),")."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"cargo contract verify"),": contract verification (",(0,i.kt)("a",{parentName:"li",href:"https://github.com/paritytech/cargo-contract/pull/1404"},"#1404"),", ",(0,i.kt)("a",{parentName:"li",href:"https://github.com/paritytech/cargo-contract/pull/1306"},"#1306"),")"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"cargo contract info")," now outputs the language of the deployed contract, using a heuristic (",(0,i.kt)("a",{parentName:"li",href:"https://github.com/paritytech/cargo-contract/pull/1329"},"#1329"),")"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"cargo contract info --binary"),": outputs the on-chain Wasm of the contract (",(0,i.kt)("a",{parentName:"li",href:"https://github.com/paritytech/cargo-contract/pull/1311/"},"#1311"),")"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"cargo contract info --all"),": displays all addresses of deployed contracts on a particular chain (",(0,i.kt)("a",{parentName:"li",href:"https://github.com/paritytech/cargo-contract/pull/1319"},"#1319"),")"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"cargo contract storage"),": displays the storage of an on-chain contract (",(0,i.kt)("a",{parentName:"li",href:"https://github.com/paritytech/cargo-contract/pull/1395"},"#1395"),", ",(0,i.kt)("a",{parentName:"li",href:"https://github.com/paritytech/cargo-contract/pull/1414"},"#1414"),")")),(0,i.kt)("center",null,(0,i.kt)("img",{src:"/img/contract-storage.png"})),(0,i.kt)("h3",{id:"alternative-off-chain-e2e-testing-backend-support-drink"},"Alternative off-chain E2E testing backend support: DRink!"),(0,i.kt)("p",null,"DRink! is a toolbox for ink! developers that allows for testing your contracts\nwithout any running node. "),(0,i.kt)("p",null,"It has a number of features that are pretty great:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"deploy and call your contracts synchronously, ",(0,i.kt)("em",{parentName:"li"},"without any delays")," related to block production or networking."),(0,i.kt)("li",{parentName:"ul"},"enhanced debugging and call tracing."),(0,i.kt)("li",{parentName:"ul"},"supports ",(0,i.kt)("em",{parentName:"li"},"arbitrary runtime")," configurations, including custom chain extensions and runtime calls."),(0,i.kt)("li",{parentName:"ul"},"full control over runtime state, including block number, timestamp, etc.")),(0,i.kt)("p",null,"See the ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/inkdevhub/drink"},"DRink!")," page for more details."),(0,i.kt)("h3",{id:"contract-verification"},"Contract Verification"),(0,i.kt)("p",null,"We added a bunch of helpful documentation and ",(0,i.kt)("inlineCode",{parentName:"p"},"cargo-contract")," commands for\ncontract verification. ",(0,i.kt)("a",{parentName:"p",href:"/5.x/basics/verification/contract-verification"},"Read more here"),"."),(0,i.kt)("h3",{id:"we-improved-the-contract-example-illustrating-upgradeable-contracts-via-delegate_call"},"We improved the contract example illustrating upgradeable contracts via ",(0,i.kt)("inlineCode",{parentName:"h3"},"delegate_call")),(0,i.kt)("p",null,"See ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/paritytech/ink/tree/master/integration-tests/upgradeable-contracts"},"here"),"\nfor the contract example."),(0,i.kt)("h3",{id:"we-made-set_code_hash-generic"},"We made ",(0,i.kt)("inlineCode",{parentName:"h3"},"set_code_hash")," generic"),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"self.env().set_code_hash()")," method now accepts the ",(0,i.kt)("inlineCode",{parentName:"p"},"Hash")," environment type instead\nof a concrete ",(0,i.kt)("inlineCode",{parentName:"p"},"[u8; 32]"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-rust"},"// Previously\npub fn set_code(&mut self, code_hash: [u8; 32]) {\n    ink::env::set_code_hash(&code_hash).unwrap_or_else(|err| {});\n}\n        \n// Now \npub fn set_code(&mut self, code_hash: Hash) {\n    self.env().set_code_hash(&code_hash).unwrap_or_else(|err| {});\n}\n")),(0,i.kt)("p",null,"More details in ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/paritytech/ink/pull/1906"},"#1906"),"."),(0,i.kt)("h3",{id:"buffer-size-can-be-customized"},"Buffer size can be customized"),(0,i.kt)("p",null,"With ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/paritytech/ink/pull/1869"},"#1869")," we added a possibility\nof setting a custom static buffer size for ink! to use."),(0,i.kt)("p",null,"ink! uses a static buffer for interacting with pallet-contracts, i.e. to move data\nbetween ",(0,i.kt)("inlineCode",{parentName:"p"},"pallet-contracts")," and a smart contract. The advantage of a static buffer\nis that no gas-expensive heap allocations are necessary, all allocations are done\nusing simple pointer arithmetic."),(0,i.kt)("p",null,"The default static buffer size is 16 kB, which is enough for on-chain smart\ncontracts. However, the ",(0,i.kt)("a",{parentName:"p",href:"https://phala.network/"},"Phala Network")," parachain on Polkadot\nallows the deployment of ink! contracts off-chain. Hence, for their chain certain high\ncomputation contracts might require a larger buffer size."),(0,i.kt)("h3",{id:"stabilized-call_runtime"},"Stabilized ",(0,i.kt)("inlineCode",{parentName:"h3"},"call_runtime")),(0,i.kt)("p",null,"We stabilized ",(0,i.kt)("inlineCode",{parentName:"p"},"call_runtime")," in ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/paritytech/ink/pull/1749"},"#1749"),".\nIt can be used to call a runtime dispatchable from an ink! contract."),(0,i.kt)("p",null,"You can find a contract example and a comparison with chain extensions\n",(0,i.kt)("a",{parentName:"p",href:"https://github.com/paritytech/ink/tree/master/integration-tests/call-runtime"},"here"),".\nWe've added an example of how to end-to-end test\n",(0,i.kt)("inlineCode",{parentName:"p"},"call_runtime")," ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/paritytech/ink/tree/master/integration-tests/e2e-call-runtime"},"here"),"."))}h.isMDXComponent=!0}}]);