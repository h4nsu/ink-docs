"use strict";(self.webpackChunkink_docs=self.webpackChunkink_docs||[]).push([[7996],{83576:(e,r,t)=>{t.r(r),t.d(r,{assets:()=>i,contentTitle:()=>c,default:()=>u,frontMatter:()=>s,metadata:()=>a,toc:()=>d});var n=t(17624),o=t(4552);const s={title:"decodeError",hide_title:!0,description:"Return an error message for a RegistryError if it exists."},c="decodeError",a={id:"frontend/core/contracts/decode-error",title:"decodeError",description:"Return an error message for a RegistryError if it exists.",source:"@site/docs/frontend/core/contracts/decode-error.md",sourceDirName:"frontend/core/contracts",slug:"/frontend/core/contracts/decode-error",permalink:"/frontend/core/contracts/decode-error",draft:!1,unlisted:!1,editUrl:"https://github.com/paritytech/ink-docs/edit/master/docs/frontend/core/contracts/decode-error.md",tags:[],version:"current",frontMatter:{title:"decodeError",hide_title:!0,description:"Return an error message for a RegistryError if it exists."},sidebar:"reference",previous:{title:"decodeCallResult",permalink:"/frontend/core/contracts/decode-call-result"},next:{title:"getRegistryError",permalink:"/frontend/core/contracts/get-registry-error"}},i={},d=[{value:"Basic Usage",id:"basic-usage",level:2},{value:"Return Type",id:"return-type",level:2}];function l(e){const r={a:"a",code:"code",h1:"h1",h2:"h2",p:"p",pre:"pre",strong:"strong",...(0,o.M)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(r.h1,{id:"decodeerror",children:"decodeError"}),"\n",(0,n.jsxs)(r.p,{children:['A function to easily check for an error emitted from a pallet, a.k.a. a "registry error",\nand return a string. This is used heavily throughout ',(0,n.jsx)(r.strong,{children:"useink"}),". See ",(0,n.jsx)(r.a,{href:"/",children:"example use\nhere"}),". See ",(0,n.jsx)(r.a,{href:"https://polkadot.js.org/docs/substrate/errors",children:"this list of common pallet\nerrors"})," you may want to check for."]}),"\n",(0,n.jsx)(r.h2,{id:"basic-usage",children:"Basic Usage"}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-ts",children:"import { call, decodeError } from 'useink/core';\nconst result = await call(chainContract, ...additionalArgs);\n\nconst err = decodeError(\n  result, \n  chainContract,\n  { \n    ContractTrapped: 'Something blew up in the contract',\n    OutOfGas: 'The call ran are out of gas',\n    // See https://polkadot.js.org/docs/substrate/errors for a list of more errors\n    // you may want to check for.\n  },\n  'Something went wrong. This is a default error.'\n);\n\nconsole.error(err);\n"})}),"\n",(0,n.jsx)(r.h2,{id:"return-type",children:"Return Type"}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-ts",children:"string | undefined\n"})})]})}function u(e={}){const{wrapper:r}={...(0,o.M)(),...e.components};return r?(0,n.jsx)(r,{...e,children:(0,n.jsx)(l,{...e})}):l(e)}},4552:(e,r,t)=>{t.d(r,{I:()=>a,M:()=>c});var n=t(11504);const o={},s=n.createContext(o);function c(e){const r=n.useContext(s);return n.useMemo((function(){return"function"==typeof e?e(r):{...r,...e}}),[r,e])}function a(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:c(e.components),n.createElement(s.Provider,{value:r},e.children)}}}]);